<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>http://gamov.io/</id>
<title>Steeplesoft</title>
<author>
<name>Viktor Gamov</name>
</author>
<updated>2017-06-09T09:30:19-04:00</updated>
<link href="http://gamov.io/feed.atom" rel="self" type="application/atom+xml" />
<link href="http://gamov.io/" rel="alternate" type="text/html" />
<entry>
<id>http://gamov.io/posts/2017/06/08/how-to-scale-hazelcast-docker-containers-with-docker-compose.html</id>
<title>How To Scale Hazelcast Cluster with Docker Compose</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-06-08T13:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/06/08/how-to-scale-hazelcast-docker-containers-with-docker-compose.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Table of Contents

Into
Getting Docker images

Official stuff
Client app
Building client app Docker image


Enter Docker Compose
Scaling
What&#8217;s next?









TL;DR
During webinar about «Distributed Caching for you next Node.js project» [1] I was asked if we provide examples of running Hazelcast with Compose or Swarm.
Now you have it!
Full source code published in hazelcast/hazelcast-code-samples repository [2]









Disclaimer: It&#8217;s not an introduction to docker-compose.
To learn basic steps of docker-compose, please, refer to official docker-compose «getting started guide» [3]







Into


From the perspective of containerization and cloud deployment, Hazelcast IMDG is a perfect candidate.




Elastically Scalable

just add more servers, and they form the cluster automatically and contribute their memory to the «shared memory».



Performs at...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#into&quot;&gt;Into&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#getting-docker-images&quot;&gt;Getting Docker images&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#official-stuff&quot;&gt;Official stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#client-app&quot;&gt;Client app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#building-client-app-docker-image&quot;&gt;Building client app Docker image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#enter-docker-compose&quot;&gt;Enter Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#scaling&quot;&gt;Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#what-s-next&quot;&gt;What’s next?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;http://gamov.io/images/IMDG_orange_logo_square.png&quot; alt=&quot;IMDG orange logo square&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;http://gamov.io/images/Compose.png&quot; alt=&quot;Compose&quot; width=&quot;20%&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
&lt;p&gt;During webinar about «Distributed Caching for you next Node.js project» &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; I was asked if we provide examples of running Hazelcast with Compose or Swarm.
Now you have it!
Full source code published in &lt;code&gt;hazelcast/hazelcast-code-samples&lt;/code&gt; repository &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- toc disabled --&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;strong&gt;Disclaimer:&lt;/strong&gt; It’s not an introduction to &lt;code&gt;docker-compose&lt;/code&gt;.
To learn basic steps of &lt;code&gt;docker-compose&lt;/code&gt;, please, refer to official &lt;code&gt;docker-compose&lt;/code&gt; «getting started guide» &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;into&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#into&quot;&gt;&lt;/a&gt;Into&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the perspective of containerization and cloud deployment, Hazelcast IMDG is a perfect candidate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Elastically Scalable&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;just add more servers, and they form the cluster automatically and contribute their memory to the «shared memory».&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performs at in-memory transaction speeds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highly Available&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;can deploy in backup pairs or &lt;a href=&quot;https://hazelcast.com/products/wan-replication/&quot;&gt;even WAN replicated&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fault Tolerant&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;no single point of failure&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hazelcast.org/plugins/?type=cloud-deployment&quot;&gt;Ready for Cloud&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/scale_out_asmith.png&quot; alt=&quot;scale out asmith&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Matrix Reloaded, 2003 &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_4&quot; class=&quot;footnote&quot; href=&quot;#_footnote_4&quot; title=&quot;View footnote.&quot;&gt;4&lt;/a&gt;]&lt;/sup&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve been working with few clients &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_5&quot; class=&quot;footnote&quot; href=&quot;#_footnote_5&quot; title=&quot;View footnote.&quot;&gt;5&lt;/a&gt;]&lt;/sup&gt; who have embraced containerization of their IMDG deployments.
And in this blog post, I explore how to use Docker Compose to scale Hazelcast IMDG cluster.
Additionally, I will use  &lt;a href=&quot;https://hazelcast.com/products/management-center/&quot;&gt;Management Center&lt;/a&gt; monitor IMDG cluster state.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-docker-images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-docker-images&quot;&gt;&lt;/a&gt;Getting Docker images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demonstration, I will be using official Hazelcast IMDG Docker images.
My demo application will contain three components:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hazelcast IMDG cluster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hazelcast Management Center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client Application&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will build docker image for my client app that will read and write to the Hazelcast IMDG cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;official-stuff&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#official-stuff&quot;&gt;&lt;/a&gt;Official stuff&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find &lt;a href=&quot;https://hub.docker.com/u/hazelcast/&quot;&gt;officially supported images&lt;/a&gt; in Docker Hub.
I will be using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/hazelcast/hazelcast/&quot;&gt;hazelcast/hazelcast&lt;/a&gt; - OSS bits of Hazelcast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/hazelcast/management-center/&quot;&gt;hazelcast/management-center&lt;/a&gt; - Management Center &lt;code&gt;.war&lt;/code&gt; (free with 2 Hazelcast nodes)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;client-app&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#client-app&quot;&gt;&lt;/a&gt;Client app&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A client app is a simple hazelcast client&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyClient {
    public static void main(String[] args) throws InterruptedException {

        ClientConfig clientConfig = new XmlClientConfigBuilder().build();   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        final HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

        System.out.println(clientConfig.toString());

        IQueue&amp;lt;String&amp;gt; queue = client.getQueue(&amp;quot;queue&amp;quot;);
        queue.put(&amp;quot;Hello!&amp;quot;);    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        System.out.println(&amp;quot;Message sent by Hazelcast Client!&amp;quot;);

        HazelcastClient.shutdownAll();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;configured with &lt;code&gt;hazelcast-client.xml&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;connects to the cluster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;sends message to the IQueue&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;building-client-app-docker-image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-client-app-docker-image&quot;&gt;&lt;/a&gt;Building client app Docker image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, to build docker image from «fat» jar, I use Spotify’s &lt;code&gt;docker-maven-plugin&lt;/code&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_6&quot; class=&quot;footnote&quot; href=&quot;#_footnote_6&quot; title=&quot;View footnote.&quot;&gt;6&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Maven snippet for generation fat jar and build a Docker image&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
        &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;configuration&amp;gt;
            &amp;lt;archive&amp;gt;
                &amp;lt;manifest&amp;gt;
                    &amp;lt;mainClass&amp;gt;MyClient&amp;lt;/mainClass&amp;gt;
                &amp;lt;/manifest&amp;gt;
            &amp;lt;/archive&amp;gt;
            &amp;lt;descriptorRefs&amp;gt;
                &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;
            &amp;lt;/descriptorRefs&amp;gt;
        &amp;lt;/configuration&amp;gt;
        &amp;lt;executions&amp;gt;
            &amp;lt;execution&amp;gt;
                &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt; &amp;lt;!-- this is used for inheritance merges --&amp;gt;
                &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;!-- bind to the packaging phase --&amp;gt;
                &amp;lt;goals&amp;gt;
                    &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
                &amp;lt;/goals&amp;gt;
            &amp;lt;/execution&amp;gt;
        &amp;lt;/executions&amp;gt;
    &amp;lt;/plugin&amp;gt;
    &amp;lt;plugin&amp;gt;
        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        &amp;lt;groupId&amp;gt;com.spotify&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;docker-maven-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${docker-maven-plugin.version}&amp;lt;/version&amp;gt;
        &amp;lt;configuration&amp;gt;
            &amp;lt;imageName&amp;gt;hazelcast_client_app&amp;lt;/imageName&amp;gt;
            &amp;lt;dockerDirectory&amp;gt;src/main/docker&amp;lt;/dockerDirectory&amp;gt;
            &amp;lt;resources&amp;gt;
                &amp;lt;resource&amp;gt;
                    &amp;lt;targetPath&amp;gt;/&amp;lt;/targetPath&amp;gt;
                    &amp;lt;directory&amp;gt;${project.build.directory}&amp;lt;/directory&amp;gt;
                    &amp;lt;include&amp;gt;${project.build.finalName}-jar-with-dependencies.jar&amp;lt;/include&amp;gt;
                &amp;lt;/resource&amp;gt;
            &amp;lt;/resources&amp;gt;
        &amp;lt;/configuration&amp;gt;
    &amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;builds fat jar to be deployed as docker image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;builds docker image with Hazelcast client app and dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enter-docker-compose&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enter-docker-compose&quot;&gt;&lt;/a&gt;Enter Docker Compose&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Compose allows you to define a multi-container application with all of its dependencies in a single file, then spin your application and dependencies up in a single command.
Navigate to directory &lt;code&gt;hazelcast-code-samples/hazelcast-integration/docker-compose/src/main/docker&lt;/code&gt; and run the command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Start the cluster, a client, and management center containers&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose -f hazelcast.yml up -d&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;docker-compose&lt;/code&gt; command will pull the images from Docker Hub and then link them together based on the information inside the &lt;code&gt;docker-compose.yml&lt;/code&gt; (&lt;code&gt;hazelcast.yml&lt;/code&gt; in out case) file.
This will create ports, links between containers, and configure applications as required.
After the command completes we can now view the status of our cluster with command &lt;code&gt;docker-compose ps&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;scaling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#scaling&quot;&gt;&lt;/a&gt;Scaling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fun part comes with scaling.
Let’s scale out our Hazelcast IMDG cluster to 2 nodes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;docker-compose command for scaling Hazelcast cluster&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;docker-compose scale hazelcast=5&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a command &lt;code&gt;docker-compose ps&lt;/code&gt; you see which containers are running now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ docker-compose -f src/main/docker/hazelcast.yml ps
           Name                         Command               State            Ports
---------------------------------------------------------------------------------------------
docker_hazelcast-client_1    /bin/sh -c echo &amp;quot;The appli ...   Exit 0
docker_hazelcast_1           ./server.sh                      Up       5701/tcp
docker_hazelcast_2           ./server.sh                      Up       5701/tcp
docker_hazelcast_3           ./server.sh                      Up       5701/tcp
docker_hazelcast_4           ./server.sh                      Up       5701/tcp
docker_hazelcast_5           ./server.sh                      Up       5701/tcp
docker_management-center_1   /bin/sh -c ./start.sh            Up       0.0.0.0:8080-&amp;gt;8080/tcp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you open Management Center URL[&lt;a href=&quot;http://localhost:8080/mancenter&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mancenter&lt;/a&gt;] you should see that cluster consists of 5 nodes now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/mancenter_1.png&quot; alt=&quot;mancenter 1&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Management Center web app displays IMDG cluster of 5 nodes&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If at this point you get a message from Management Center to enter the license, you can request a trial key from here &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_7&quot; class=&quot;footnote&quot; href=&quot;#_footnote_7&quot; title=&quot;View footnote.&quot;&gt;7&lt;/a&gt;]&lt;/sup&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, I can use &lt;code&gt;curl&lt;/code&gt; command to get cluster status and the list of members.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Query cluster status using Management Center&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;❯ curl http://localhost:8080/mancenter/rest/clusters/hz-compose/members
[&amp;quot;172.18.0.3:5701&amp;quot;,&amp;quot;172.18.0.4:5701&amp;quot;,&amp;quot;172.18.0.5:5701&amp;quot;,&amp;quot;172.18.0.6:5701&amp;quot;,&amp;quot;172.18.0.7:5701&amp;quot;]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can shutdown those application stack (IMDG cluster, Management center, Hazelcast client Java application) with single command&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;docker-compose -f src/main/docker/hazelcast.yml down&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my future posts, I will explore other tools that allow you to deploy, scale and orchestrate your Hazelcast IMDG cluster with different tools like Swarm, Kubernetes, Mesos.
If you have questions or suggestions, feel free to comment below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. &lt;a href=&quot;https://hazelcast.com/resources/distributed-caching-next-node-js-project/&quot; class=&quot;bare&quot;&gt;https://hazelcast.com/resources/distributed-caching-next-node-js-project/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/docker-compose&quot; class=&quot;bare&quot;&gt;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/docker-compose&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. &lt;a href=&quot;https://docs.docker.com/compose/gettingstarted/&quot; class=&quot;bare&quot;&gt;https://docs.docker.com/compose/gettingstarted/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_4&quot;&gt;
&lt;a href=&quot;#_footnoteref_4&quot;&gt;4&lt;/a&gt;. &lt;a href=&quot;http://www.imdb.com/title/tt0234215/&quot; class=&quot;bare&quot;&gt;http://www.imdb.com/title/tt0234215/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_5&quot;&gt;
&lt;a href=&quot;#_footnoteref_5&quot;&gt;5&lt;/a&gt;. &lt;a href=&quot;https://hazelcast.com/services/consulting/&quot; class=&quot;bare&quot;&gt;https://hazelcast.com/services/consulting/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_6&quot;&gt;
&lt;a href=&quot;#_footnoteref_6&quot;&gt;6&lt;/a&gt;. &lt;a href=&quot;https://github.com/spotify/docker-maven-plugin&quot; class=&quot;bare&quot;&gt;https://github.com/spotify/docker-maven-plugin&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_7&quot;&gt;
&lt;a href=&quot;#_footnoteref_7&quot;&gt;7&lt;/a&gt;. &lt;a href=&quot;https://hazelcast.com/hazelcast-enterprise-download/trial/&quot; class=&quot;bare&quot;&gt;https://hazelcast.com/hazelcast-enterprise-download/trial/&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/05/30/acgnj-2017.html</id>
<title>Distributed Java Streams @ ACGNJ 2017</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-05-30T17:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/05/30/acgnj-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Table of Contents

The Splendors and Miseries of the Distributed Streams
Have you seen it? Do you like it? Please, rate
Slides



The Splendors and Miseries of the Distributed Streams









Have you seen it? Do you like it? Please, rate

Loading...



Slides

TBD
TBD...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#the-splendors-and-miseries-of-the-distributed-streams&quot;&gt;The Splendors and Miseries of the Distributed Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;Have you seen it? Do you like it? Please, rate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-splendors-and-miseries-of-the-distributed-streams&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-splendors-and-miseries-of-the-distributed-streams&quot;&gt;&lt;/a&gt;The Splendors and Miseries of the Distributed Streams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/RgTlHELZiZQ?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;/a&gt;Have you seen it? Do you like it? Please, rate&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSeeJN9gLXRTUaCEUmCET5PDdTQTdBfT5HMY1KPNaAnQcc49XQ/viewform?embedded=true&quot; width=&quot;600&quot; height=&quot;500&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot;&gt;&lt;/a&gt;Slides&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
TBD
TBD
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/04/18/phillyete-2017.html</id>
<title>JavaPuzzlers @ PhillyETE 2017</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-04-18T10:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/04/18/phillyete-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Table of Contents

Have you seen it? Do you like it? Please, rate
Slides



Have you seen it? Do you like it? Please, rate

Loading...



Slides

TBD
    [Philly ETE] Java Puzzlers NG  from Viktor Gamov...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;Have you seen it? Do you like it? Please, rate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;/a&gt;Have you seen it? Do you like it? Please, rate&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSdFdfYPhPYF_0ZuJ3ZxoNRWSGrVmrUHR9nghfggmI_ifilLSw/viewform?embedded=true&quot; width=&quot;600&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot;&gt;&lt;/a&gt;Slides&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
TBD
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/AEqSoxwy4nkZCg?startSlide=2&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://gamov.io//www.slideshare.net/VikGamov/philly-ete-java-puzzlers-ng&quot; title=&quot;[Philly ETE] Java Puzzlers NG&quot; target=&quot;_blank&quot;&gt;[Philly ETE] Java Puzzlers NG&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://gamov.io//www.slideshare.net/VikGamov&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/04/08/jpoint-2017.html</id>
<title>JPoint - 2107 [RU]</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-04-08T18:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/04/08/jpoint-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Table of Contents

Распределяй и властвуй — 2: Потоки данных наносят ответный удар - Russian Edition

Видели ли вы этот доклад? как Вам?
Видео
Слайды
Код 














Распределяй и властвуй — 2: Потоки данных наносят ответный удар - Russian Edition


Видели ли вы этот доклад? как Вам?
Гружу...


Видео

TBD



Слайды

    Распределяй и властвуй — 2: Потоки данных наносят ответный удар  from Viktor Gamov 


Код 


Примеры кода вы найдете здесь
https://github.com/hazelcast/hazelcast-jet-code-samples


Подсчет строк
https://github.com/hazelcast/hazelcast-jet-code-samples/blob/master/core/wordcount/src/main/java/WordCount.java


Консьюмер Кафки
https://github.com/hazelcast/hazelcast-jet-code-samples/blob/master/kafka/consume-kafka/src/main/java/ConsumeKafka.java...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#Распределяй-и-властвуй-2-Потоки-данных-наносят-ответный-удар-russian-edition&quot;&gt;Распределяй и властвуй — 2: Потоки данных наносят ответный удар - Russian Edition&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#Видели-ли-вы-этот-доклад-как-Вам&quot;&gt;Видели ли вы этот доклад? как Вам?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Видео&quot;&gt;Видео&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Слайды&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Код-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;Код &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/jpoint.png&quot; alt=&quot;jpoint&quot; width=&quot;20%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;Распределяй-и-властвуй-2-Потоки-данных-наносят-ответный-удар-russian-edition&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Распределяй-и-властвуй-2-Потоки-данных-наносят-ответный-удар-russian-edition&quot;&gt;&lt;/a&gt;Распределяй и властвуй — 2: Потоки данных наносят ответный удар - Russian Edition&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Видели-ли-вы-этот-доклад-как-Вам&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Видели-ли-вы-этот-доклад-как-Вам&quot;&gt;&lt;/a&gt;Видели ли вы этот доклад? как Вам?&lt;/h3&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSdud9s_UOYM4lMkSWSG3QeDuwnI2wjk_5JhuB04JVq5pzBh9A/viewform?embedded=true&quot; width=&quot;600&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Гружу...&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Видео&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Видео&quot;&gt;&lt;/a&gt;Видео&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Слайды&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Слайды&quot;&gt;&lt;/a&gt;Слайды&lt;/h3&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;de15b67f6c7c4307aca07082138dcfb8&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/mRTibHpOfpibuM&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://gamov.io//www.slideshare.net/VikGamov/2-74767617&quot; title=&quot;Распределяй и властвуй — 2: Потоки данных наносят ответный удар&quot; target=&quot;_blank&quot;&gt;Распределяй и властвуй — 2: Потоки данных наносят ответный удар&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://gamov.io//www.slideshare.net/VikGamov&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Код-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Код-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;/a&gt;Код &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/gAmUssA/691009924e70b3ed7bd60e9ae998e898.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Примеры кода вы найдете здесь&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hazelcast/hazelcast-jet-code-samples&quot; class=&quot;bare&quot;&gt;https://github.com/hazelcast/hazelcast-jet-code-samples&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Подсчет строк&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hazelcast/hazelcast-jet-code-samples/blob/master/core/wordcount/src/main/java/WordCount.java&quot; class=&quot;bare&quot;&gt;https://github.com/hazelcast/hazelcast-jet-code-samples/blob/master/core/wordcount/src/main/java/WordCount.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Консьюмер Кафки&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hazelcast/hazelcast-jet-code-samples/blob/master/kafka/consume-kafka/src/main/java/ConsumeKafka.java&quot; class=&quot;bare&quot;&gt;https://github.com/hazelcast/hazelcast-jet-code-samples/blob/master/kafka/consume-kafka/src/main/java/ConsumeKafka.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/04/04/jbreak-2017.html</id>
<title>JBreak 2017 [RU]</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-04-04T10:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/04/04/jbreak-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Table of Contents

Блеск и нищета распределенных стримов - Russian Edition

Видели ли вы этот доклад? как Вам?
Видео
Слайды
Код искать тут 














Блеск и нищета распределенных стримов - Russian Edition


Видели ли вы этот доклад? как Вам?
Loading...


Видео

TBD



Слайды

    [JBreak] Блеск И Нищета Распределенных Стримов - 04-04-2017  from Viktor Gamov 


Код искать тут 

You can find code sample is following GH repository
https://github.com/gAmUssA/jet-streams-presentation


Branch for this talk Jbreak_2017...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#Блеск-и-нищета-распределенных-стримов-russian-edition&quot;&gt;Блеск и нищета распределенных стримов - Russian Edition&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#Видели-ли-вы-этот-доклад-как-Вам&quot;&gt;Видели ли вы этот доклад? как Вам?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Видео&quot;&gt;Видео&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Слайды&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Код-искать-тут-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;Код искать тут &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/jbreak.png&quot; alt=&quot;jbreak&quot; width=&quot;20%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;Блеск-и-нищета-распределенных-стримов-russian-edition&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Блеск-и-нищета-распределенных-стримов-russian-edition&quot;&gt;&lt;/a&gt;Блеск и нищета распределенных стримов - Russian Edition&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Видели-ли-вы-этот-доклад-как-Вам&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Видели-ли-вы-этот-доклад-как-Вам&quot;&gt;&lt;/a&gt;Видели ли вы этот доклад? как Вам?&lt;/h3&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSe7VKXSWOXSLqytSwq_T-OkQVGdEkKPWDEDzHCWwW_h9WfA5g/viewform?embedded=true&quot; width=&quot;600&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Видео&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Видео&quot;&gt;&lt;/a&gt;Видео&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Слайды&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Слайды&quot;&gt;&lt;/a&gt;Слайды&lt;/h3&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;106c738a739b4f0f97dd7da9278eedc7&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/v0Yc7tRkZX7J2i&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://gamov.io//www.slideshare.net/VikGamov/jbreak-04042017&quot; title=&quot;[JBreak] Блеск И Нищета Распределенных Стримов - 04-04-2017&quot; target=&quot;_blank&quot;&gt;[JBreak] Блеск И Нищета Распределенных Стримов - 04-04-2017&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://gamov.io//www.slideshare.net/VikGamov&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Код-искать-тут-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#Код-искать-тут-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;/a&gt;Код искать тут &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;You can find code sample is following GH repository&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gAmUssA/jet-streams-presentation&quot; class=&quot;bare&quot;&gt;https://github.com/gAmUssA/jet-streams-presentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Branch for this talk &lt;code&gt;Jbreak_2017&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/02/09/hazelcast-node-dot-js-client-refcard.html</id>
<title>Hazelcast Node.js Client Refcard</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-02-09T07:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/02/09/hazelcast-node-dot-js-client-refcard.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="imdg"></category>
<category term="java"></category>
<category term="nodejs"></category>
<summary>
Table of Contents

Before Getting Started
Configure Node.js client
Distributed Map
Distributed MultiMap
Distributed List
Distributed Set
Distributed Queue
Distributed Lock
Distributed Topic
About Hazelcast IMDG

Resources

















Welcome to «The Distributed World» of Hazelcast.
Here are sample usages of distributed data structures using Node.js client.


Table 1. Revisions history







Version
Date
Comments




v1.1
03/09/2015
single quotes in js code, added Before Getting Started section


v1.0
02/07/2015
Initial revision










The JavaScript examples use ES6 syntax







Before Getting Started




download latest Hazelcast distribution from https://hazelcast.org/download/


unzip to any folder


start Hazelcast member using startup script &lt;hazelast_folder&gt;/bin/start.sh











Configure Node.js client


Install Hazelcast Client Node.js Package

npm install hazelcast-client --save




const HazelcastClient = require('hazelcast-client').Client; (1)
const Config = require('hazelcast-client').Config;  (2)

let config = new Config.ClientConfig(); (3)

HazelcastClient.newHazelcastClient(config)
    .then((client) =&gt; {   (4)
  ...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#before-getting-started&quot;&gt;Before Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#configure-node-js-client&quot;&gt;Configure Node.js client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-map&quot;&gt;Distributed Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-multimap&quot;&gt;Distributed MultiMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-list&quot;&gt;Distributed List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-set&quot;&gt;Distributed Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-queue&quot;&gt;Distributed Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-lock&quot;&gt;Distributed Lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-topic&quot;&gt;Distributed Topic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#about-hazelcast-imdg&quot;&gt;About Hazelcast IMDG&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/IMDG_orange_logo_square.png&quot; alt=&quot;IMDG orange logo square&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/node.png&quot; alt=&quot;node&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Welcome to «The Distributed World» of Hazelcast.
Here are sample usages of distributed data structures using Node.js client.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 60%;&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Revisions history&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3334%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.1&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;03/09/2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;single quotes in js code, added Before Getting Started section&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.0&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;02/07/2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initial revision&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The JavaScript examples use ES6 syntax
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;before-getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#before-getting-started&quot;&gt;&lt;/a&gt;Before Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;download latest Hazelcast distribution from &lt;a href=&quot;https://hazelcast.org/download/&quot; class=&quot;bare&quot;&gt;https://hazelcast.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unzip to any folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;start Hazelcast member using startup script &lt;code&gt;&amp;lt;hazelast_folder&amp;gt;/bin/start.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/before_nodejs_client.gif&quot; alt=&quot;before nodejs client&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configure-node-js-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-node-js-client&quot;&gt;&lt;/a&gt;Configure Node.js client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Install Hazelcast Client Node.js Package&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;npm install hazelcast-client --save&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const HazelcastClient = require(&amp;apos;hazelcast-client&amp;apos;).Client; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
const Config = require(&amp;apos;hazelcast-client&amp;apos;).Config;  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

let config = new Config.ClientConfig(); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

HazelcastClient.newHazelcastClient(config)
    .then((client) =&amp;gt; {   &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        // use client object
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;import &lt;code&gt;HazelcastClient&lt;/code&gt; object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;import &lt;code&gt;Config&lt;/code&gt; object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;establish connection to local cluster member using default config&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;fully constructed and connected &lt;code&gt;client&lt;/code&gt; will be passed as parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-map&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-map&quot;&gt;&lt;/a&gt;Distributed Map&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    let map = client.getMap(&amp;apos;my-distributed-map&amp;apos;);
    map.put(&amp;apos;key&amp;apos;, &amp;apos;value&amp;apos;)
        .then(() =&amp;gt; map.get(&amp;apos;key&amp;apos;))
        .then(() =&amp;gt; map.putIfAbsent(&amp;apos;somekey&amp;apos;, &amp;apos;somevalue&amp;apos;))
        .then(() =&amp;gt; map.replace(&amp;apos;key&amp;apos;, &amp;apos;oldvalue&amp;apos;, &amp;apos;newvalue&amp;apos;))
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-multimap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-multimap&quot;&gt;&lt;/a&gt;Distributed MultiMap&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    &amp;apos;use strict&amp;apos;;
    let mmap = client.getMultiMap(&amp;apos;restaurants&amp;apos;);

    mmap.put(&amp;apos;New York&amp;apos;, &amp;apos;Red Lobster&amp;apos;)
        .then(() =&amp;gt; mmap.put(&amp;apos;New York&amp;apos;, &amp;apos;Eataly&amp;apos;))
        .then(() =&amp;gt; mmap.get(&amp;apos;New York&amp;apos;))
        .then(list =&amp;gt; console.log(list));

    mmap.put(&amp;apos;Las Vegas&amp;apos;, &amp;apos;Burgr&amp;apos;)
        .then(() =&amp;gt; mmap.put(&amp;apos;Las Vegas&amp;apos;, &amp;apos;Alibi&amp;apos;))
        .then(() =&amp;gt; mmap.put(&amp;apos;Las Vegas&amp;apos;, &amp;apos;Pub &amp;amp; Grill&amp;apos;))
        .then(() =&amp;gt; mmap.get(&amp;apos;Las Vegas&amp;apos;))
        .then(list =&amp;gt; console.log(list));
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-list&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-list&quot;&gt;&lt;/a&gt;Distributed List&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    &amp;apos;use strict&amp;apos;;
    let list = client.getList(&amp;apos;my-distributed-list&amp;apos;);

    let element = &amp;apos;element1&amp;apos;;
    list.add(element).then(() =&amp;gt; {
        list.contains(element).then((result) =&amp;gt; {
            console.log(`contains element1 - ${result}`);
        });
    });

    let elements = [&amp;apos;element2&amp;apos;, &amp;apos;element3&amp;apos;];
    list.addAll(elements).then(() =&amp;gt; {
        list.containsAll(elements).then((result) =&amp;gt; {
            console.log(`contains all element1 - ${result}`);
        })
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-set&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-set&quot;&gt;&lt;/a&gt;Distributed Set&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A set is a data structure that doesn’t allow duplicates
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    &amp;apos;use strict&amp;apos;;
    let set = client.getSet(&amp;apos;my-distributed-set&amp;apos;);

    let elements = [&amp;apos;duplicate&amp;apos;, &amp;apos;duplicate&amp;apos;, &amp;apos;duplicate&amp;apos;];
    set.addAll(elements).then(() =&amp;gt; {
        set.getAll().then((result) =&amp;gt; {
            //look, ma, no duplicates
            console.log(result);
        })
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-queue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-queue&quot;&gt;&lt;/a&gt;Distributed Queue&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    let queue = client.getQueue(&amp;apos;my-distributed-queue&amp;apos;);

    queue.offer(&amp;apos;item&amp;apos;);
    queue.poll().then(item =&amp;gt; console.log(item));

    queue.offer(&amp;apos;anotheritem&amp;apos;, 500);
    queue.poll(5000).then(item =&amp;gt; console.log(item));

    queue.offer(&amp;apos;yetanotheritem&amp;apos;);
    queue.take().then(item =&amp;gt; console.log(item));

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-lock&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-lock&quot;&gt;&lt;/a&gt;Distributed Lock&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    let lock = client.getLock(&amp;apos;my-distributed-lock&amp;apos;);

    lock.lock().then(() =&amp;gt; {
        // do something
    });

    lock.unlock();
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed-topic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-topic&quot;&gt;&lt;/a&gt;Distributed Topic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;HazelcastClient.newHazelcastClient().then((client) =&amp;gt; {
    let topic = client.getReliableTopic(&amp;apos;my-distributed-topic&amp;apos;);

    topic.addMessageListener((msg) =&amp;gt; {
        console.log(msg.messageObject);
    });
    topic.publish(&amp;apos;hello from distributed world&amp;apos;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;about-hazelcast-imdg&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#about-hazelcast-imdg&quot;&gt;&lt;/a&gt;About Hazelcast IMDG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast is an open-source in-memory data grid providing Java developers with an easy-to-use and powerful solution for creating highly available and scalable applications.
Hazelcast can be used in the areas like clustering, in-memory NoSQL, application scaling, database caching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resources&quot;&gt;&lt;/a&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Getting Started with Node.js client: &lt;a href=&quot;http://blog.hazelcast.com/getting-started-with-hazelcast-and-node-js-2/&quot; class=&quot;bare&quot;&gt;http://blog.hazelcast.com/getting-started-with-hazelcast-and-node-js-2/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docs: &lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.6/docs/&quot; class=&quot;bare&quot;&gt;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.6/docs/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download Hazelcast: &lt;a href=&quot;http://hazelcast.org/download&quot; class=&quot;bare&quot;&gt;http://hazelcast.org/download&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download Node.js client from NPM: &lt;a href=&quot;https://www.npmjs.com/package/hazelcast-client&quot; class=&quot;bare&quot;&gt;https://www.npmjs.com/package/hazelcast-client&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stack Overflow: &lt;a href=&quot;http://stackoverfow.com/questions/tagged/hazelcast&quot; class=&quot;bare&quot;&gt;http://stackoverfow.com/questions/tagged/hazelcast&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog: &lt;a href=&quot;http://blog.hazelcast.com&quot; class=&quot;bare&quot;&gt;http://blog.hazelcast.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Cases: &lt;a href=&quot;http://hazelcast.org/use-cases&quot; class=&quot;bare&quot;&gt;http://hazelcast.org/use-cases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Professional Support: &lt;a href=&quot;http://hazelcast.com/support&quot; class=&quot;bare&quot;&gt;http://hazelcast.com/support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/02/08/jfokus-2017.html</id>
<title>Jfokus 2017</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-02-08T09:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/02/08/jfokus-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="presentation"></category>
<category term="hazelcast"></category>
<summary>
Table of Contents

Riding the Distributed Java Streams

Have you seen it? Do you like it? Please, rate
Video
Slides
Grab the code 





Riding the Distributed Java Streams


Have you seen it? Do you like it? Please, rate
Loading...


Video



Slides

    [Jfokus] Riding the Jet Streams  from Viktor Gamov 


Grab the code 

You can find code sample is following GH repository
https://github.com/gAmUssA/jet-streams-presentation


Branch for this talk JFokus_Feb2017...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#riding-the-distributed-java-streams&quot;&gt;Riding the Distributed Java Streams&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;Have you seen it? Do you like it? Please, rate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;Grab the code &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;riding-the-distributed-java-streams&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#riding-the-distributed-java-streams&quot;&gt;&lt;/a&gt;Riding the Distributed Java Streams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;/a&gt;Have you seen it? Do you like it? Please, rate&lt;/h3&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSeUN0YZ4DXyRDg4e9uPrKe-hKIC-Qmhs86EZY-AkXsl1Slbig/viewform?embedded=true&quot; width=&quot;600&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;video&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#video&quot;&gt;&lt;/a&gt;Video&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_VPItjmrX2Y?list=PLaJqps0DAycqu2OV6sjl_Dm_VymB6KDV_&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot;&gt;&lt;/a&gt;Slides&lt;/h3&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;364d0680d09d483da8760c83df12fa47&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/GtUk0TwecrPtjS&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://gamov.io//www.slideshare.net/VikGamov/jfokus-riding-the-jet-streams&quot; title=&quot;[Jfokus] Riding the Jet Streams&quot; target=&quot;_blank&quot;&gt;[Jfokus] Riding the Jet Streams&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://gamov.io//www.slideshare.net/VikGamov&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;/a&gt;Grab the code &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;You can find code sample is following GH repository&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gAmUssA/jet-streams-presentation&quot; class=&quot;bare&quot;&gt;https://github.com/gAmUssA/jet-streams-presentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Branch for this talk &lt;code&gt;JFokus_Feb2017&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/02/02/nyjavasig-2017.html</id>
<title>NYJavaSig, February 2017</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-02-02T20:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/02/02/nyjavasig-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="java"></category>
<category term="stream-api"></category>
<category term="jug"></category>
<summary>
Table of Contents

Riding the Distributed Java Streams

Have you seen it? Do you like it? Please, rate
Slides
Grab the code 


Tweets 



Riding the Distributed Java Streams


Have you seen it? Do you like it? Please, rate
Loading...


Slides

    [NYJavaSig] Riding the Distributed Streams - Feb 2nd, 2017  from Viktor Gamov 


Grab the code 

You can find code sample is following GH repository
https://github.com/gAmUssA/jet-streams-presentation


Branch for this talk NYJavaSig_Feb2017





Tweets 

Large crowd building for @gAmUssA and distributed streams at #nyjavasig meeting. @java pic.twitter.com/9AzXZHjcL8&mdash; Frank Greco (@frankgreco) February 2, 2017 

Great presentation by @gAmUssA about streams and @hazelcast pic.twitter.com/5fERKGoQ1r&mdash; Biren (@birendev) February 3, 2017 

Let&#39;s look...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#riding-the-distributed-java-streams&quot;&gt;Riding the Distributed Java Streams&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;Have you seen it? Do you like it? Please, rate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;Grab the code &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tweets-span-class-icon-i-class-fa-fa-twitter-i-span&quot;&gt;Tweets &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-twitter&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;riding-the-distributed-java-streams&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#riding-the-distributed-java-streams&quot;&gt;&lt;/a&gt;Riding the Distributed Java Streams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-you-seen-it-do-you-like-it-please-rate&quot;&gt;&lt;/a&gt;Have you seen it? Do you like it? Please, rate&lt;/h3&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSd3EWIZu-cZRELvXUcSVRPTbyzGbiKPzDQJudPZGKdiys_3Sg/viewform?embedded=true&quot; width=&quot;600&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot;&gt;&lt;/a&gt;Slides&lt;/h3&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;2a44c22661014ab18bde0171507b0200&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/1MucyCaur6vT52?startSlide=2&quot; width=&quot;510&quot; height=&quot;420&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://gamov.io//www.slideshare.net/VikGamov/nyjavasig-riding-the-distributed-streams-feb-2nd-2017&quot; title=&quot;[NYJavaSig] Riding the Distributed Streams - Feb 2nd, 2017&quot; target=&quot;_blank&quot;&gt;[NYJavaSig] Riding the Distributed Streams - Feb 2nd, 2017&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://gamov.io//www.slideshare.net/VikGamov&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;/a&gt;Grab the code &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;You can find code sample is following GH repository&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gAmUssA/jet-streams-presentation/tree/NYJavaSig_Feb2017&quot;&gt;https://github.com/gAmUssA/jet-streams-presentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Branch for this talk &lt;code&gt;NYJavaSig_Feb2017&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tweets-span-class-icon-i-class-fa-fa-twitter-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tweets-span-class-icon-i-class-fa-fa-twitter-i-span&quot;&gt;&lt;/a&gt;Tweets &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-twitter&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Large crowd building for &lt;a href=&quot;https://twitter.com/gAmUssA&quot;&gt;@gAmUssA&lt;/a&gt; and distributed streams at &lt;a href=&quot;https://twitter.com/hashtag/nyjavasig?src=hash&quot;&gt;#nyjavasig&lt;/a&gt; meeting. &lt;a href=&quot;https://twitter.com/java&quot;&gt;@java&lt;/a&gt; &lt;a href=&quot;https://t.co/9AzXZHjcL8&quot;&gt;pic.twitter.com/9AzXZHjcL8&lt;/a&gt;&lt;/p&gt;— Frank Greco (@frankgreco) &lt;a href=&quot;https://twitter.com/frankgreco/status/827301892850122752&quot;&gt;February 2, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great presentation by &lt;a href=&quot;https://twitter.com/gAmUssA&quot;&gt;@gAmUssA&lt;/a&gt; about streams and &lt;a href=&quot;https://twitter.com/hazelcast&quot;&gt;@hazelcast&lt;/a&gt; &lt;a href=&quot;https://t.co/5fERKGoQ1r&quot;&gt;pic.twitter.com/5fERKGoQ1r&lt;/a&gt;&lt;/p&gt;— Biren (@birendev) &lt;a href=&quot;https://twitter.com/birendev/status/827315714033905664&quot;&gt;February 3, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Let&amp;apos;s look at the code! &lt;a href=&quot;https://twitter.com/gAmUssA&quot;&gt;@gAmUssA&lt;/a&gt; on distributed streams at &lt;a href=&quot;https://twitter.com/hashtag/NYJavaSIG?src=hash&quot;&gt;#NYJavaSIG&lt;/a&gt; mtg &lt;a href=&quot;https://twitter.com/java&quot;&gt;@java&lt;/a&gt; &lt;a href=&quot;https://t.co/Z8l8NxdZoR&quot;&gt;pic.twitter.com/Z8l8NxdZoR&lt;/a&gt;&lt;/p&gt;— Frank Greco (@frankgreco) &lt;a href=&quot;https://twitter.com/frankgreco/status/827313334915624960&quot;&gt;February 3, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Distributed Streams by &lt;a href=&quot;https://twitter.com/gAmUssA&quot;&gt;@gAmUssA&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/hashtag/NYJavaSIG?src=hash&quot;&gt;#NYJavaSIG&lt;/a&gt;. Thanks &lt;a href=&quot;https://twitter.com/frankgreco&quot;&gt;@frankgreco&lt;/a&gt; &lt;a href=&quot;https://twitter.com/CreditSuisse&quot;&gt;@CreditSuisse&lt;/a&gt; &lt;a href=&quot;https://t.co/KgpHmWSv5I&quot;&gt;pic.twitter.com/KgpHmWSv5I&lt;/a&gt;&lt;/p&gt;— Sai Sharan Donthi (@sai_donthi) &lt;a href=&quot;https://twitter.com/sai_donthi/status/827315748037152768&quot;&gt;February 3, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A traditional tweet from the stage &lt;a href=&quot;https://twitter.com/hashtag/nyjavasig?src=hash&quot;&gt;#nyjavasig&lt;/a&gt;! &lt;br /&gt;I asked people say Java 😃&lt;a href=&quot;https://twitter.com/hashtag/hazelcastjet?src=hash&quot;&gt;#hazelcastjet&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/h?src=hash&quot;&gt;#h&lt;/a&gt;… &lt;a href=&quot;https://t.co/jE35I39XBx&quot;&gt;https://t.co/jE35I39XBx&lt;/a&gt; &lt;a href=&quot;https://t.co/r2DtjCrijK&quot;&gt;pic.twitter.com/r2DtjCrijK&lt;/a&gt;&lt;/p&gt;— Viktor Gamov (@gAmUssA) &lt;a href=&quot;https://twitter.com/gAmUssA/status/827298089643958273&quot;&gt;February 2, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2017/01/12/codemash-2017.html</id>
<title>Codemash 2017</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2017-01-12T13:00:00+00:00</published>
<link href="http://gamov.io/posts/2017/01/12/codemash-2017.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Table of Contents

Caching Made Bootiful

Have you seen it? Do you like it?
Slides
Grab the code 














Caching Made Bootiful







Have you seen it? Do you like it?
Loading...


Slides

    [Codemash] Caching Made &quot;Bootiful&quot;!  from Viktor Gamov 


Grab the code 

You can find code sample is following GH repository
https://github.com/gAmUssA/bootiful_codemash2017


Each branch represents parts of the talk:




00-Inception - starting point of this talk, introduction of a slow service


01-EnableCaching - we&#8217;re trying to fix slowness by enabling Spring Caching Abstraction


02-EnableEmbeddedDistributedCaching - go distributed with embedded Hazelcast cluster.


02-EnableClientClusterDistributedCaching - distributed client-cluster topology


03-EnterJCache - with standard API for caching we can remove bunch of code and enable...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#caching-made-bootiful&quot;&gt;Caching Made Bootiful&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#have-you-seen-it-do-you-like-it&quot;&gt;Have you seen it? Do you like it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;Grab the code &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.codemash.org/wp-content/themes/codemash/images/codemash-icon-featured-box.png&quot; alt=&quot;codemash icon featured box&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;caching-made-bootiful&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#caching-made-bootiful&quot;&gt;&lt;/a&gt;Caching Made Bootiful&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/QkQfFosZIlo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;have-you-seen-it-do-you-like-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-you-seen-it-do-you-like-it&quot;&gt;&lt;/a&gt;Have you seen it? Do you like it?&lt;/h3&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLScXPE770oDhESoMlyP_oc35CYh50-lawp8TNN-oONInjB4Y4w/viewform?embedded=true&quot; width=&quot;760&quot; height=&quot;500&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot;&gt;&lt;/a&gt;Slides&lt;/h3&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;8a942f7501cf4f06b4a803f18ea41b7f&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/nlIjtpsiKHQIZx&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://gamov.io//www.slideshare.net/VikGamov/codemash-caching-made-bootiful&quot; title=&quot;[Codemash] Caching Made &amp;quot;Bootiful&amp;quot;!&quot; target=&quot;_blank&quot;&gt;[Codemash] Caching Made &amp;quot;Bootiful&amp;quot;!&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://gamov.io//www.slideshare.net/VikGamov&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grab-the-code-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;/a&gt;Grab the code &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;You can find code sample is following GH repository&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gAmUssA/bootiful_codemash2017&quot; class=&quot;bare&quot;&gt;https://github.com/gAmUssA/bootiful_codemash2017&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each branch represents parts of the talk:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00-Inception&lt;/code&gt; - starting point of this talk, introduction of a &lt;em&gt;slow&lt;/em&gt; service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01-EnableCaching&lt;/code&gt; - we’re trying to fix slowness by enabling Spring Caching Abstraction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;02-EnableEmbeddedDistributedCaching&lt;/code&gt; - go distributed with embedded Hazelcast cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;02-EnableClientClusterDistributedCaching&lt;/code&gt; - distributed client-cluster topology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;03-EnterJCache&lt;/code&gt; - with standard API for caching we can remove bunch of code and enable nice features like entry listeners&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2016/09/09/whats-new-in-hazelcast-client-for-nodejs.html</id>
<title>What&#8217;s New in Hazelcast Node.js Client</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2016-09-09T06:05:51-06:00</published>
<link href="http://gamov.io/posts/2016/09/09/whats-new-in-hazelcast-client-for-nodejs.html" rel="alternate" type="text/html" />
<author>
<name>Mustafa Iman &lt;mustafa.iman@hazelcast.com&gt;, Viktor Gamov &lt;viktor@hazelcast.com&gt;</name>
</author>
<category term="hazelcast"></category>
<category term="nodejs"></category>
<summary>
TL;DR
Rejoice, JavaScript people!
There are many new features in Hazelcast Node.js Client 0.4.1.
In the 10 minutes, you spend reading this blog I will cover "what&#8217;s new"!
Also, if you read this blog post till the end, you will also learn what&#8217;s coming to future releases.





Table of content

What&#8217;s new

Serialization and Interoperability with other Hazelcast clients
Predicates
MultiMap, Set, List
Distributed Lock
Messaging with Queue
Data Affinity


Sneak Peek of v0.5 and beyond

Even more Data Structures!
Fresh Meat


Resources



It has been a while since out first blog post on Hazelcast Node.js Client [1].
Our brave developers have been very busy adding new features and making Hazelcast Node.js Client faster!








If you haven&#8217;t read previous...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/node.png&quot; alt=&quot;node&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
Rejoice, JavaScript people!
There are many new features in Hazelcast Node.js Client 0.4.1.
In the 10 minutes, you spend reading this blog I will cover &amp;quot;what’s new&amp;quot;!
Also, if you read this blog post till the end, you will also learn what’s coming to future releases.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of content&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#whats-new-in-0.4&quot;&gt;What’s new&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#serialization-support-and-interoperability-of-languages&quot;&gt;Serialization and Interoperability with other Hazelcast clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#predicates&quot;&gt;Predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#multimap&quot;&gt;MultiMap, Set, List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lock&quot;&gt;Distributed Lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#queue&quot;&gt;Messaging with Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#data-affinity&quot;&gt;Data Affinity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#whats-next&quot;&gt;Sneak Peek of v0.5 and beyond&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#even-more-data-structures&quot;&gt;Even more Data Structures!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fresh-meat&quot;&gt;Fresh Meat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been a while since out first blog post on Hazelcast Node.js Client &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
Our brave developers have been very busy adding new features and making Hazelcast Node.js Client faster!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you haven’t read previous Getting Started blog post, it’s a perfect opportunity to press &lt;kbd&gt;Pause&lt;/kbd&gt; button now.
That &amp;quot;Getting started&amp;quot; post contains all required information to get the Hazelcast Node.js Client gears moving.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new-in-0.4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new-in-0.4&quot;&gt;&lt;/a&gt;What’s new&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The code example in this article were tested under &lt;code&gt;node v6.3.1 (npm v3.10.3)&lt;/code&gt; with Hazelcast Client &lt;code&gt;0.4.1&lt;/code&gt;.
Many examples contain modern EcmaScript 6 syntax constructs, like classes and &lt;code&gt;⇒&lt;/code&gt; aka «arrow function» &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alright.
Since our previous announcement of v0.2, we added the most of the frequently used features of Hazelcast to Node.js client. Including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distributed Map aka &lt;code&gt;IMap&lt;/code&gt; with support of Predicates and Entry Processors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MultiMap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed Locks aka &lt;code&gt;ILock&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Queue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, we brought full interoperability with other Hazelcast clients &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Let’s have a quick look at this first because:&lt;/div&gt;
&lt;blockquote&gt;
I don’t know how to put this, but it’s kind of a big deal.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Ron Burgundy&lt;br /&gt;
&lt;cite&gt;Anchorman: The Legend of Ron Burgundy&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/ron.jpg&quot; alt=&quot;ron&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;serialization-support-and-interoperability-of-languages&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#serialization-support-and-interoperability-of-languages&quot;&gt;&lt;/a&gt;Serialization and Interoperability with other Hazelcast clients&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast Node.js client now supports all native serialization techniques that Hazelcast supports.
Meaning you can just connect your Node.js client to your working Hazelcast cluster and read what is already there, put new objects and read them from other clients.
The fact that Node.js client supports Hazelcast native serialization means it is also fully compatible with all available client languages.
The client serializes string, number, and array data types automatically.
This makes text-based serialization formats like JSON or XML suitable candidate for a message.
Developers can provide serializers for custom objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, a Java application uses Hazelcast Java Client to store the results of a long-running computation (like Map/Reduce job), and Node.js, &lt;code&gt;.NET&lt;/code&gt; or Python applications can consume the results for displaying for the web (Node.js), in Rich Desktop Application (.NET / C#) or for further research and data science with Python math packages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate this approach, let’s write &lt;code&gt;Java&lt;/code&gt; &lt;code&gt;⇐⇒&lt;/code&gt; &lt;code&gt;Node.js&lt;/code&gt; application.
We will use &lt;code&gt;Person&lt;/code&gt; object from the previous blog post.
It has 3 properties - &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Person.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Person implements IdentifiedDataSerializable { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    String firstName;
    String lastName;
    int age;

    public Person() {
    }

    public Person(String firstName, String lastName, int age) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    @Override
    public void writeData(ObjectDataOutput out) throws IOException { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        out.writeUTF(firstName);
        out.writeUTF(lastName);
        out.writeInt(age);
    }

    @Override
    public void readData(ObjectDataInput in) throws IOException { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        this.firstName = in.readUTF();
        this.lastName = in.readUTF();
        this.age = in.readInt();
    }

    @Override public int getFactoryId() {
        return 42;
    }

    @Override public int getId() {
        return 42;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;Person&lt;/code&gt; object implements IdentifiedDataSerializable - fast serialization from Hazelcast.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;writeData&lt;/code&gt; method defines how property values will be written to the binary output.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;readData&lt;/code&gt; method defines how values can be retrieved from binary input.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Make sure you read from input in the same order you as you wrote to the binary output.
Detailed description of &lt;code&gt;IdentifiedDataSerializable&lt;/code&gt; methods can be found «Serialization» &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_4&quot; class=&quot;footnote&quot; href=&quot;#_footnote_4&quot; title=&quot;View footnote.&quot;&gt;4&lt;/a&gt;]&lt;/sup&gt; section of &lt;a href=&quot;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html&quot;&gt;Hazelcast Documentation&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Let’s look what a JavaScript counterpart object looks like.&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;class Person {
  constructor(firstName, lastName, age) {   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
  }

  getFactoryId() {
    return 42;
  }

  getClassId() {
    return 42;
  }

  writeData(dataOutput) {   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    dataOutput.writeUTF(this.firstName);
    dataOutput.writeUTF(this.lastName);
    dataOutput.writeInt(this.age);
  }

  readData(dataInput) {     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    this.firstName = dataInput.readUTF();
    this.lastName = dataInput.readUTF();
    this.age = dataInput.readInt();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;JavaScript doesn’t have interfaces as Java. So, it’s just a JavaScript class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Similarly to Java object, we need to implement &lt;code&gt;writeData&lt;/code&gt;…​&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;…​ and &lt;code&gt;readData&lt;/code&gt; methods.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Last step - register &lt;code&gt;DataSerializableFactory&lt;/code&gt; in client config object&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var config = new Config.ClientConfig();
config.serializationConfig.dataSerializableFactories[42] = {
    create (type) {
        if (type === 42) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            return new Person();
        }
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Based on &lt;code&gt;typeId&lt;/code&gt;, Hazelcast will figure out what object will be restored from the binary data.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can checkout
&lt;a href=&quot;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#serialization&quot;&gt;Serialization Section&lt;/a&gt; and
&lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.4/docs/modules/_serialization_serializable_.html&quot;&gt;Node.js documentation&lt;/a&gt; about how to register custom serializers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;predicates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#predicates&quot;&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast IMap is an essentially key-value store.
And usually, a developer uses the keys to retrieve data.
But in certain cases, a developer doesn’t know a key.
Or when a developer needs to find many entries satisfy a condition from a distributed Map.
In this case, you needed to retrieve all entries from that map and filter them on the client side.
But this method leads to the substantial amount of network communion.
If you are looking for a small subset of the entries, it is more efficient to retrieve only the entries you are looking for using newly introduced predicates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s say you keep ages of people in a Hazelcast map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;map.putAll([&amp;apos;Alice&amp;apos;, 34], [&amp;apos;Joe&amp;apos;, 22], [&amp;apos;George&amp;apos;, 27]);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can quickly retrieve entries of people that are older than 25 with following code snippet&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const Predicates = require(&amp;apos;hazelcast-client&amp;apos;).Predicates;
map.entrySetWithPredicate(Predicates.greaterThan(&amp;apos;this&amp;apos;, 25))
  .then((people) =&amp;gt; {
    people.forEach(person =&amp;gt; console.log(`Person: ${person[0]}, age: ${person[1]}`));
  });&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Above snippet will print names and ages of &lt;code&gt;Alice&lt;/code&gt; and &lt;code&gt;George&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you only need their names but not ages,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;map.keySetWithPredicate(Predicates.greaterThan(&amp;apos;this&amp;apos;, 25));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;will return only names of &lt;code&gt;Alice&lt;/code&gt; and &lt;code&gt;George&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a full list of available predicates at &lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.4/docs/modules/_core_predicate_.html&quot;&gt;API docs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;multimap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#multimap&quot;&gt;&lt;/a&gt;MultiMap, Set, List&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MultiMap is a particular version of a Map that supports multiple values associated with a single key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The restaurants MultiMap&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;let mmap = hazelcastClient.getMultiMap(&amp;apos;restaurants&amp;apos;);      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
mmap.put(&amp;apos;New York&amp;apos;, &amp;apos;Red Lobster&amp;apos;)     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  .then(() =&amp;gt; mmap.put(&amp;apos;New York&amp;apos;, &amp;apos;Eataly&amp;apos;))
  .then(() =&amp;gt; mmap.get(&amp;apos;New York&amp;apos;))
  .then(list =&amp;gt; console.log(list));

mmap.put(&amp;apos;Las Vegas&amp;apos;, &amp;apos;Burgr&amp;apos;)      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  .then(() =&amp;gt; mmap.put(&amp;apos;Las Vegas&amp;apos;, &amp;apos;Alibi&amp;apos;))
  .then(() =&amp;gt; mmap.put(&amp;apos;Las Vegas&amp;apos;, &amp;apos;Pub &amp;amp; Grill&amp;apos;))
  .then(() =&amp;gt; mmap.get(&amp;apos;Las Vegas&amp;apos;))
  .then(list =&amp;gt; console.log(list));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In this example we have MultiMap of restaurants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Name of the city used as a key - &lt;code&gt;New York&lt;/code&gt; or &lt;code&gt;Las Vegas&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When we need to get a collection of entries.
Hazelcast MultiMap supports two types of values - &lt;code&gt;Set&lt;/code&gt; (doesn’t allow duplicates, default) and &lt;code&gt;List&lt;/code&gt; (preserves order).
It can be configured using cluster config object &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_5&quot; class=&quot;footnote&quot; href=&quot;#_footnote_5&quot; title=&quot;View footnote.&quot;&gt;5&lt;/a&gt;]&lt;/sup&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Output looks like follows&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;[ &amp;apos;Eataly&amp;apos;, &amp;apos;Red Lobster&amp;apos; ]
[ &amp;apos;Pub &amp;amp; Grill&amp;apos;, &amp;apos;Alibi&amp;apos;, &amp;apos;Burgr&amp;apos; ]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more info here - &lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.4/docs/interfaces/_proxy_multimap_.multimap.html&quot;&gt;MultiMap API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lock&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lock&quot;&gt;&lt;/a&gt;Distributed Lock&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need to synchronize your data access through the cluster, Hazelcast’s distributed lock implementation will come useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;let globalLock = client.getLock(&amp;apos;global-lock&amp;apos;);

globalLock.lock();
// you can do some job here which doesn&amp;apos;t allow shared access
globalLock.unlock();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All supported lock operations are listed in &lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.4/docs/interfaces/_proxy_ilock_.ilock.html&quot;&gt;ILock API&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;queue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#queue&quot;&gt;&lt;/a&gt;Messaging with Queue&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast distributed queue enables all cluster members and client to interact with it.
Using Hazelcast distributed queue, you can add an item from one client and read it from another.
FIFO ordering will apply to all queue operations across the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Client 1 - Consumer of tasks&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;let logger = hazelcastClient.loggingService;
let queue = hazelcastClient.getQueue(&amp;apos;tasks&amp;apos;);

// slow consumer
setInterval(() =&amp;gt; {
    queue.take().then(task =&amp;gt; logger.info(&amp;quot;Consumer&amp;quot;, `executing task: ${task}`));
}, 1000);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Client 2 - Producer of tasks&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;let logger = hazelcastClient.loggingService;
let queue = hazelcastClient.getQueue(&amp;apos;tasks&amp;apos;);

// fast producer
setInterval(() =&amp;gt; {
    var task = tasks[Math.floor(Math.random() * tasks.length)];
    logger.info(&amp;quot;Producer&amp;quot;, `publishing task: ${task}`);
    queue.offer(task);
}, 500);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, Hazelcast’s uses a «buffer» to separate a fast producer from a slow consumer and this prevents consumer overloading.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;data-affinity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data-affinity&quot;&gt;&lt;/a&gt;Data Affinity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the things that we brought to &lt;code&gt;v0.4.1&lt;/code&gt; is ability increase locality of computations and data access on a cluster.
Developers will be able to control on which partitions each key is stored.
It is only a matter of adding a &lt;code&gt;getPartitionKey()&lt;/code&gt; function to user objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A developer needs to implement &lt;code&gt;getPartitionKey&lt;/code&gt; method&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&amp;apos;use strict&amp;apos;;
let Client = require(&amp;apos;hazelcast-client&amp;apos;).Client;

class Company {  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  constructor(name, address) {
    this.name = name;
    this.address = address;
  }

  getName() {
    return this.name;
  }
}

class Associate {   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  constructor(firstName, lastName, companyName) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.companyName = companyName;
  }

  getCompanyName() {
    return this.companyName;
  }
}

class PartitionAwareKey {
  constructor(key, partitionKey) {
    this.key = key;
    this.partitionKey = partitionKey;
  }

  getPartititionKey() { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    return this.partitionKey;
  }
}

Client.newHazelcastClient().then((hazelcastClient) =&amp;gt; {
  let companyMap = hazelcastClient.getMap(&amp;apos;companyMap&amp;apos;);
  let associateMap = hazelcastClient.getMap(&amp;apos;associateMap&amp;apos;);
  let partitionService = hazelcastClient.getPartitionService();

  let company = new Company(&amp;apos;IBM&amp;apos;, &amp;apos;Armonk, North Castle, NY&amp;apos;);
  let associate = new Associate(&amp;apos;John&amp;apos;, &amp;apos;Smith&amp;apos;, company.getName());

  let key1 = new PartitionAwareKey(&amp;apos;k1&amp;apos;, company.getName());    &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  let key2 = new PartitionAwareKey(&amp;apos;a1&amp;apos;, associate.getCompanyName());   &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

  console.log(partitionService.getPartitionId(key1));   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  console.log(partitionService.getPartitionId(key2));   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

  companyMap.set(key1, company).then(() =&amp;gt; associateMap.set(key2, associate));  &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A class &lt;code&gt;Company&lt;/code&gt; contains name and address of a company.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A class &lt;code&gt;Associate&lt;/code&gt; contains info about company’s employee.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PartitionAwareKey&lt;/code&gt; (sort of a composite key) should have &lt;code&gt;getPartitionId&lt;/code&gt; method that Hazelcast will use to collocate related data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;companyName&lt;/code&gt; property used as partition id.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;partitionId&lt;/code&gt; for both keys will be the same…​&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;…​meaning «John Smith» and «IBM» will be co-located on the same partition.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having selected key partition explicitly, users can benefit from on the cluster processing of entries using EntryProcessor’s.
Entry processor eliminates the cost of transferring entries between cluster and clients back and forth for simple transformations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about Data Affinity in Hazelcast, check official documentation &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_6&quot; class=&quot;footnote&quot; href=&quot;#_footnote_6&quot; title=&quot;View footnote.&quot;&gt;6&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;Sneak Peek of v0.5 and beyond&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/wonka.jpg&quot; alt=&quot;wonka&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;even-more-data-structures&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#even-more-data-structures&quot;&gt;&lt;/a&gt;Even more Data Structures!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New release of Node.js client will introduce new data structures such as &lt;code&gt;RingBuffer&lt;/code&gt; and &lt;code&gt;Topic&lt;/code&gt;.
These data structures are suitable for implementing pub-sub use cases.
Together with &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;RB&lt;/code&gt; and &lt;code&gt;Topic&lt;/code&gt; enable messaging capabilities for your application.
Check &lt;a href=&quot;#queue&quot;&gt;Messaging with Queue&lt;/a&gt; section for peer-to-peer communication example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;fresh-meat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fresh-meat&quot;&gt;&lt;/a&gt;Fresh Meat&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though v0.5 is not released yet, you don’t have to wait for to try these new features.
You can build the client locally &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_7&quot; class=&quot;footnote&quot; href=&quot;#_footnote_7&quot; title=&quot;View footnote.&quot;&gt;7&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Or, thanks to NPM,  install Hazelcast Client from &lt;code&gt;master&lt;/code&gt; branch.&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;npm install git+https://git@github.com:hazelcast/hazelcast-nodejs-client.git&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The feedback and pull requests are greatly appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, please, stay in touch.
There a bunch of way to provide the feedback:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hazelcast Node.js Client &lt;a href=&quot;http://github.com/hazelcast/hazelcast-nodejs-client/&quot;&gt;repository on github&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if you have found a bug, please report&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chat with the developers&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/hazelcast/hazelcast&quot;&gt;Hazelcast Chat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/hazelcast/hazelcast-nodejs-client&quot;&gt;Hazelcast Node.js client Chat&lt;/a&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_8&quot; class=&quot;footnote&quot; href=&quot;#_footnote_8&quot; title=&quot;View footnote.&quot;&gt;8&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/hazelcast&quot;&gt;Google Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/hazelcast&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. &lt;a href=&quot;http://blog.hazelcast.com/getting-started-with-hazelcast-and-node-js-2/&quot; class=&quot;bare&quot;&gt;http://blog.hazelcast.com/getting-started-with-hazelcast-and-node-js-2/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. &lt;a href=&quot;http://wesbos.com/arrow-functions/&quot; class=&quot;bare&quot;&gt;http://wesbos.com/arrow-functions/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. &lt;a href=&quot;https://hazelcast.org/clients-languages/&quot; class=&quot;bare&quot;&gt;https://hazelcast.org/clients-languages/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_4&quot;&gt;
&lt;a href=&quot;#_footnoteref_4&quot;&gt;4&lt;/a&gt;. &lt;a href=&quot;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#identifieddataserializable&quot; class=&quot;bare&quot;&gt;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#identifieddataserializable&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_5&quot;&gt;
&lt;a href=&quot;#_footnoteref_5&quot;&gt;5&lt;/a&gt;. &lt;a href=&quot;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#configuring-multimap&quot; class=&quot;bare&quot;&gt;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#configuring-multimap&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_6&quot;&gt;
&lt;a href=&quot;#_footnoteref_6&quot;&gt;6&lt;/a&gt;. &lt;a href=&quot;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#data-affinity&quot; class=&quot;bare&quot;&gt;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#data-affinity&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_7&quot;&gt;
&lt;a href=&quot;#_footnoteref_7&quot;&gt;7&lt;/a&gt;. &lt;a href=&quot;https://github.com/hazelcast/hazelcast-nodejs-client#building-and-installing-from-sources&quot; class=&quot;bare&quot;&gt;https://github.com/hazelcast/hazelcast-nodejs-client#building-and-installing-from-sources&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_8&quot;&gt;
&lt;a href=&quot;#_footnoteref_8&quot;&gt;8&lt;/a&gt;. It is a community chat / forum but not a support portal. We can help with answering the questions, and provide pointers but we’re not going to write code for you. We are encouraging people in the community to share the knowledge, please, don’t abuse it. If you’re interested in 24/7 support, we have a dedicated support portal available on commercial terms. Contact &lt;code&gt;sales at Hazelcast dot com&lt;/code&gt; to learn more.
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2016/04/18/getting-started-with-hazelcast-and-node.html</id>
<title>Getting Started with Hazelcast and Node.js</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2016-04-18T06:05:51-06:00</published>
<link href="http://gamov.io/posts/2016/04/18/getting-started-with-hazelcast-and-node.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="hazelcast"></category>
<category term="nodejs"></category>
<summary>
TL;DR
Install the package npm install hazelcast-client, grab a demo app and read API docs.
Time To «Hello World!» less than 5 min.





Table of content

Intro
Let&#8217;s Write Your First Node.js App with Hazelcast

Before you start
Install The Hazelcast Client Package from NPM
Your First Hazelcast App


Resources





Intro


On the behalf of Hazelcast Team, I&#8217;m pleased to announce the availability of version 0.2 of the Hazelcast Client for Node.js.


The new version includes following features:




IMap

Node.js client supports following operations of IMap - get, put, remove.



Smart Client

A client connects to each cluster node.
Since each data partition uses the well known and consistent hashing algorithm, each client can send an operation...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/node.png&quot; alt=&quot;node&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
Install the package &lt;code&gt;npm install hazelcast-client&lt;/code&gt;, &lt;a href=&quot;#fullapp&quot;&gt;grab a demo app&lt;/a&gt; and read &lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.2/docs&quot;&gt;API docs&lt;/a&gt;.
Time To «Hello World!» less than 5 min.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of content&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#let-s-write-your-first-node-js-app-with-hazelcast&quot;&gt;Let’s Write Your First Node.js App with Hazelcast&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#before-you-start&quot;&gt;Before you start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#install-the-hazelcast-client-package-from-npm&quot;&gt;Install The Hazelcast Client Package from NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#your-first-hazelcast-app&quot;&gt;Your First Hazelcast App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the behalf of Hazelcast Team, I’m pleased to announce the availability of version 0.2 of the Hazelcast Client for Node.js.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new version includes following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IMap&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Node.js client supports following operations of &lt;code&gt;IMap&lt;/code&gt; - &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart Client&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A client connects to each cluster node.
Since each data partition uses the well known and &lt;strong&gt;consistent hashing algorithm&lt;/strong&gt;, each client can send an operation to the relevant cluster node.
This increases the overall throughput and efficiency.
Plus, you don’t need to restart the client when adding or removing nodes from the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed Object Listener&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enables the notification regarding the creation and deletion of a distributed object (like &lt;code&gt;IMap&lt;/code&gt;) on the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast Client for Node.js is available from NPM.
API documentation available on &lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/api/0.2/docs&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;let-s-write-your-first-node-js-app-with-hazelcast&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#let-s-write-your-first-node-js-app-with-hazelcast&quot;&gt;&lt;/a&gt;Let’s Write Your First Node.js App with Hazelcast&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;before-you-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#before-you-start&quot;&gt;&lt;/a&gt;Before you start&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;You need to download Hazelcast from &lt;a href=&quot;http://hazelcast.org/download/&quot;&gt;official website&lt;/a&gt; and unpack it to any folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start Hazelcast cluster using &lt;a href=&quot;http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#using-the-scripts-in-the-package&quot;&gt;startup scripts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;install-the-hazelcast-client-package-from-npm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install-the-hazelcast-client-package-from-npm&quot;&gt;&lt;/a&gt;Install The Hazelcast Client Package from NPM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have Node Package Manager (npm) installed, you will be able to install the Hazelcast Node.js client just by running this from the command line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install hazelcast-client&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;your-first-hazelcast-app&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#your-first-hazelcast-app&quot;&gt;&lt;/a&gt;Your First Hazelcast App&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this introduction, we are going to be creating a simple console application by opening a text editor and creating a JavaScript file.
To begin, we need to connect to our cluster and retrieve the «persons» map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Connect to local Hazelcast cluster&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var HazelcastClient = require(&amp;apos;hazelcast-client&amp;apos;).Client; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
var Config = require(&amp;apos;hazelcast-client&amp;apos;).Config; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

var config = new Config.ClientConfig();
config.networkConfig.addresses = [{host: &amp;apos;127.0.0.1&amp;apos;, port: &amp;apos;5701&amp;apos;}]; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
var map = {};
HazelcastClient
    .newHazelcastClient(config)       &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    .then(function (hazelcastClient) {  &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        map = hazelcastClient.getMap(&amp;quot;persons&amp;quot;);
         // do stuff with map
    });&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Importing &lt;code&gt;Client&lt;/code&gt; class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Importing &lt;code&gt;Config&lt;/code&gt; class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Providing an address of local Hazelcast cluster.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;There is another method &lt;code&gt;Hazelcast.newHazelcastClient()&lt;/code&gt; that doesn’t take parameters.
It uses the default config with local addresses.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A function &lt;code&gt;newHazelcastClient&lt;/code&gt; returns a promise. A promise is an object that represents the return value or the thrown exception that the function may eventually provide.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you are connected to the cluster and have retrieved personMap, let’s insert a John Doe object into the &amp;quot;persons&amp;quot; map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var insertPerson = function (map) {
    var person = {     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        firstName: &amp;quot;John&amp;quot;,
        lastName: &amp;quot;Doe&amp;quot;,
        age: 42
    };
    map.put(1, person).then(function (previousValue) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        console.log(&amp;quot;Previous value: &amp;quot; + JSON.stringify(previousValue));
    });
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the person object that will be inserted into Hazelcast IMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;put&lt;/code&gt; operation returns a promise of previous value for a given key.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, you can read and delete the object from IMap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var readPerson = function (map) {
    map.get(1).then(function (value) {
        // do object stuff here
    })
};

var deletePerson = function (map) {
    map.remove(1).then(function (value) {
        // do object stuff here
    })
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;fullapp&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Full source of the simple CRUD application&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var HazelcastClient = require(&amp;apos;hazelcast-client&amp;apos;).Client;
var Config = require(&amp;apos;hazelcast-client&amp;apos;).Config;

var config = new Config.ClientConfig();
config.networkConfig.addresses = [{host: &amp;apos;127.0.0.1&amp;apos;, port: &amp;apos;5701&amp;apos;}];

var map = {};

HazelcastClient
    .newHazelcastClient(config)
    .then(function (hazelcastClient) {
        map = hazelcastClient.getMap(&amp;quot;persons&amp;quot;);
        insertPerson(map);
        readPerson(map);
        deletePerson(map);
    });

var printValue = function (text, value) {
    console.log(text + JSON.stringify(value));
};

var insertPerson = function (map) {
    var person = {
        firstName: &amp;quot;Joe&amp;quot;,
        lastName: &amp;quot;Doe&amp;quot;,
        age: 42
    };
    map.put(1, person).then(function (previousValue) {
        printValue(&amp;quot;Previous value: &amp;quot;, previousValue);
    });
};

var readPerson = function (map) {
    map.get(1).then(function (value) {
        printValue(&amp;quot;Value for key=1: &amp;quot;, value);
    })
};

var deletePerson = function (map) {
    map.remove(1).then(function (value) {
        printValue(&amp;quot;Previous value: &amp;quot;, value);
    })
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output of this application should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[DefaultLogger] INFO at ClusterService: Members received.
[ Member {
    address: Address { host: &amp;apos;10.10.26.22&amp;apos;, port: 5701 },
    uuid: &amp;apos;25fd2aae-a0e6-4293-94db-8f5d6af62ca8&amp;apos;,
    isLiteMember: false,
    attributes: {} } ]
[DefaultLogger] INFO at HazelcastClient: Client started
Previous value: null
Value for key=1: {&amp;quot;firstName&amp;quot;:&amp;quot;Joe&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}
Previous value: {&amp;quot;firstName&amp;quot;:&amp;quot;Joe&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congrats!
You have just connected to a Hazelcast cluster and performed basic CRUD operations against Hazelcast IMap and demonstrated the ease of using Hazelcast with the Node.js client.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://hazelcast.github.io/hazelcast-nodejs-client/&quot;&gt;Hazelcast Node.js client code on github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chat with the developers&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/hazelcast/hazelcast&quot;&gt;Hazelcast Chat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/hazelcast/hazelcast-nodejs-client&quot;&gt;Hazelcast Node.js client Chat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/hazelcast&quot;&gt;Google Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/hazelcast&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2016/03/31/travel-report-q1-2016.html</id>
<title>Travel Report - Q1 2016</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2016-03-31T20:00:00+00:00</published>
<link href="http://gamov.io/posts/2016/03/31/travel-report-q1-2016.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
TL;DR
Life on the road. It&#8217;s a brief review of first three months of 2016.
Major events - Toronto JUG, Central Ohio JUG, DevNexus.





Table of Contents

Intro
Conferences and User Groups 

Toronto JUG, Toronto, CA
Central Ohio Java User Group (COJUG), Dublin, OH
DevNexus 2016, Atlanta, GA
New York Spring User Group, New York, NY
Chattanooga Developers Meetup, Chattanooga, TN


The Plans For Q2 
Stay In Touch








Table 1. Revisions history







Version
Date
Comments




v1.0
3/31/2015
Initial blog post






Intro


At the suggestion of those of you who read my blog and send me comments, I am going to try to write one post about travel and events per quarter.
With that said, 2016 just began, and I have...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
Life on the road. It’s a brief review of first three months of 2016.
Major events - Toronto JUG, Central Ohio JUG, DevNexus.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#events&quot;&gt;Conferences and User Groups &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#toronto-jug-toronto-ca&quot;&gt;Toronto JUG, Toronto, CA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#central-ohio-java-user-group-cojug-dublin-oh&quot;&gt;Central Ohio Java User Group (COJUG), Dublin, OH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#devnexus-2016-atlanta-ga&quot;&gt;DevNexus 2016, Atlanta, GA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#new-york-spring-user-group-new-york-ny&quot;&gt;New York Spring User Group, New York, NY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chattanooga-developers-meetup-chattanooga-tn&quot;&gt;Chattanooga Developers Meetup, Chattanooga, TN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-plans-for-q2-span-class-icon-i-class-fa-fa-plane-i-span&quot;&gt;The Plans For Q2 &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-plane&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stay-in-touch&quot;&gt;Stay In Touch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/luggage.jpeg&quot; alt=&quot;luggage&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 60%;&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Revisions history&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3334%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.0&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3/31/2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initial blog post&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the suggestion of those of you who read my blog and send me comments, I am going to try to write one post about travel and events per quarter.
With that said, 2016 just began, and I have already completed five events to share with you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events&quot;&gt;&lt;/a&gt;Conferences and User Groups &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;toronto-jug-toronto-ca&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#toronto-jug-toronto-ca&quot;&gt;&lt;/a&gt;Toronto JUG, Toronto, CA&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a vacation with my family in the warm sand of Miami, FL, it was a tough trip to Canada during the winter.
I spent the entire day of working with the clients and prospects in Toronto.
Then I was off to speak at Toronto JUG.
The Java User Group happened right at the bar. It was a first for me!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/torontojug.jpeg&quot; alt=&quot;torontojug&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Literally!
The developers got to eat, drink and enjoy the show by truly yours.
I found myself feeling like a struggling standup comedian.
You will enjoy watching me dream about being at the bar myself!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Video is available &lt;a href=&quot;https://www.youtube.com/watch?v=sToNgv_R6rQ&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;central-ohio-java-user-group-cojug-dublin-oh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#central-ohio-java-user-group-cojug-dublin-oh&quot;&gt;&lt;/a&gt;Central Ohio Java User Group (COJUG), Dublin, OH&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then it was off to another fascinating first in Ohio.
I presented to this meet-up group during lunch time.
The COJUG folks have found this format is more flexible for many of the members.
Of course, they have a traditional &amp;quot;after work&amp;quot; format they use too.
That allows them to make their events work for a larger number of schedules too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/cojug.jpeg&quot; alt=&quot;cojug&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kudos to those organizers for offering flexibility!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;devnexus-2016-atlanta-ga&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#devnexus-2016-atlanta-ga&quot;&gt;&lt;/a&gt;DevNexus 2016, Atlanta, GA&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next was DevNexus, sponsored by the AJUG.
This year was once again a blast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/devnexus_2016.jpg&quot; alt=&quot;devnexus 2016&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I met over 200 people and did three talks.
If you were unfortunate and did not get to attend, perhaps one of these three talks will provide some encouragement to get you to the next year event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ground Up Introduction to in-memory Data (Grids)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/eeJs0KnT2eg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ultimate Spring Configurations Face-off with &lt;a href=&quot;http://twitter.com/jbaruch&quot;&gt;@jbaruch&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/yfain&quot;&gt;@yfain&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Epic Groovy Puzzlers: Season 2 with &lt;a href=&quot;http://twitter.com/jbaruch&quot;&gt;@jbaruch&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The week culminated with an interview by &lt;a href=&quot;http://twitter.com/steveonjava&quot;&gt;@steveonjava&lt;/a&gt;.
I always enjoy being ask to discuss the value of using in-memory data grids.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/lgabhNr6LqM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-york-spring-user-group-new-york-ny&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-york-spring-user-group-new-york-ny&quot;&gt;&lt;/a&gt;New York Spring User Group, New York, NY&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, I got a few days at home and could head over to do a session for them on caching use cases in Spring Boot projects.
&lt;a href=&quot;http://www.meetup.com/NYC-SUG/events/228892296/&quot;&gt;New York Spring Users Meet-up&lt;/a&gt;
If you have one of these use cases on the horizon, let me know what you think and if I can help—drop me a note!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
By the way, I will be doing a webinar on the similar topic next week.
Make sure to RSVP &lt;a href=&quot;http://www2.hazelcast.com/l/30822/2016-03-16/75v5cp&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;chattanooga-developers-meetup-chattanooga-tn&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chattanooga-developers-meetup-chattanooga-tn&quot;&gt;&lt;/a&gt;Chattanooga Developers Meetup, Chattanooga, TN&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Chattanooga Cho-Cho was my final destination for this month.
It was another group that prefers a productive lunch break with AWESOME chicken biscuits!
A chicken biscuit for lunch was also a first for me!
But it won’t be the last time I have that for lunch!
They have live video stream from the event for members that can’t get there for lunch!
I am really impressed with the flexibility that JUG organizers are developing to make these learning and networking sessions work for such a variety of schedules!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/NtbMjx1cdJs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-plans-for-q2-span-class-icon-i-class-fa-fa-plane-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-plans-for-q2-span-class-icon-i-class-fa-fa-plane-i-span&quot;&gt;&lt;/a&gt;The Plans For Q2 &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-plane&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. As you will see the plan for Q2 is even bigger and broader!&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Event Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Location&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Topic&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hazelcast Webinar Series&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Online&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Caching Made Bootiful&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April, 4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Philly Emerging Tech 2016&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Philadelphia, PA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Just a Hazelcast Booth&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April, 11-12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DevRelConf&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;San Francisco, CA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Learn from gurus of developer relationships&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April, 16&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Enterprise Data World&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;San Diego, CA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://edw2016.dataversity.net/sessionPop.cfm?confid=94&amp;amp;proposalid=8216&quot;&gt;Ground-up introduction in in-memory data grids&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April 17-18&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JPoint&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Moscow, RU&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://javapoint.ru/talks/gamov/&quot;&gt;Распределенные кэши: Беспредел!&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April 22-23&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JPoint, Student’s Day&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Moscow, RU&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://students.javapoint.ru/talks/gamov/&quot;&gt;Распределяй и властвуй: введение в распределенные системы&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April 24&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Moscow JUG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Moscow, RU&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Все что вы хотели знать о Hazelcast, но боялись спросить&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;April 26&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OSCON&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Austin,TX&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Just a Hazelcast booth&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;May 17-19&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;swampUp!&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Napa, CA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://swampup.jfrog.com/?schedule=pragmatic-scalability-under-the-hood-of-artifactory-ha&quot;&gt;Pragmatic Scalability: under the hoot of Artifactory HA&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;May 23-24&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;GeekOut&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tallin, Estonia&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://2016.geekout.ee/schedule/distributed-caching-with-jcache-and-beyond/&quot;&gt;Distributed Caching with JCache and Beyond&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;June 9-10&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;stay-in-touch&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stay-in-touch&quot;&gt;&lt;/a&gt;Stay In Touch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I look forward to meeting even more of you in person this quarter!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For even more opportunities to develop your distributed system knowledge, I encourage you to keep an eye on &lt;a href=&quot;https://hazelcast.com/company/events/&quot;&gt;Hazelcast Events&lt;/a&gt; page or follow me at &lt;a href=&quot;http://twitter.com/gamussa&quot;&gt;@gamussa&lt;/a&gt; on Twitter!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2015/12/31/caching-made-bootiful.html</id>
<title>Caching Made Bootiful — Hazelcast Way</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2015-12-31T22:18:23-06:00</published>
<link href="http://gamov.io/posts/2015/12/31/caching-made-bootiful.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="hazelcast"></category>
<category term="spring boot"></category>
<summary>
TL;DR
Source code from this blog is posted on the Hazelcast Code Examples repository on Github.





The folks at OpenCredo recently published a blog post entitled «Running and Testing Hazelcast in a Spring Boot Application».
They introduce some of the basic features of Hazelcast including: Spring dependency injection, how to embed it in a Spring Boot application and write simple integration tests.
It is a really good first reading if your using Spring.
Make sure you check it out.


In this post, I will demonstrate how to add caching capabilities using Hazelcast in your Spring Boot application.
You will see how the Spring Framework caching abstraction plays...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/hazelcast_boot_1.png&quot; alt=&quot;hazelcast boot 1&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
Source code from this blog is posted on &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/springboot-caching&quot;&gt;the Hazelcast Code Examples repository on Github&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph lead&quot;&gt;
&lt;p&gt;The folks at OpenCredo recently published a blog post entitled &lt;a href=&quot;https://www.opencredo.com/2015/12/01/spring-booting-hazelcast/&quot;&gt;«Running and Testing Hazelcast in a Spring Boot Application&lt;/a&gt;».
They introduce some of the basic features of Hazelcast including: Spring dependency injection, how to embed it in a Spring Boot application and write simple integration tests.
It is a really good first reading if your using Spring.
Make sure you check it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, I will demonstrate how to add caching capabilities using Hazelcast in your Spring Boot application.
You will see how the Spring Framework caching abstraction plays nicely with Hazelcast without invoking an explicit Hazelcast API.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of content&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#slow-service&quot;&gt;Slow service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#enable-caching&quot;&gt;Enable Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#it-s-a-wrap&quot;&gt;It’s a wrap!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s &lt;a href=&quot;#intro&quot;&gt;get going&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As many of you know, a &lt;strong&gt;cache&lt;/strong&gt; stores the data so that future requests for that data is faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the requested data is in the cache (&lt;strong&gt;cache hit&lt;/strong&gt;), this request can be served by simply reading the cache, which is faster because it bypasses slow data retrieval or time-consuming computations.
If the data is not in the cache (&lt;strong&gt;cache miss&lt;/strong&gt;), the data has to be recomputed or fetched from its original storage location, which is slower.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this use-case, I will demonstrate techniques you can speed up various parts of your applications that suffer from slow performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slow-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slow-service&quot;&gt;&lt;/a&gt;Slow service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My service returns city names (method &lt;code&gt;getCity()&lt;/code&gt;).
I know that retrieving a city might take some time, so I will use &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&quot;&gt;Spring Caching&lt;/a&gt; annotations to delegate cache interactions with Spring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My service is annotated with Spring Annotations&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;

public interface IDummyBean {

    @Cacheable(&amp;quot;city&amp;quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    String getCity();

    @CachePut(value = &amp;quot;city&amp;quot;, key = &amp;quot;#city + 1&amp;quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    String setCity(String city);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/Cachable&quot;&gt;@Cachable&lt;/a&gt;&lt;/code&gt; annotation triggers population of a cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/CachePut&quot;&gt;@CachePut&lt;/a&gt;&lt;/code&gt; annotation updates the cache without interfering with the method execution&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is an implementation of this service.
It returns the city of Ankara (one of the Hazelcast offices locations).
Potentially, I could have used Spring Data or another framework to provide an implementation of a service over a range of SQL or NoSQL stores.
For simplicity in this example, I will use a naive implementation that simulates typical latency (like network service, slow delay, poorly tuned database, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class DummyBean implements IDummyBean {
    @Override
    public String getCity() {
        try {
            TimeUnit.SECONDS.sleep(5); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return &amp;quot;Ankara&amp;quot;;
    }
    @Override public String setCity(String city) {
        return city;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Slow &lt;em&gt;O_o&lt;/em&gt; method!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is an emulation of a slow method.  Don’t do it in real life!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I simply annotate a slow method with the &lt;code&gt;&lt;a href=&quot;https://github.com/Cacheble&quot;&gt;@Cacheble&lt;/a&gt;&lt;/code&gt; annotation and let Spring Boot do the heavy lifting. This is all I need to do with my application logic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enable-caching&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enable-caching&quot;&gt;&lt;/a&gt;Enable Caching&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast is often an embedded component of an application.
Ultimately, the application instance becomes a member of the Hazelcast cluster.
Another option is to separate the actual storage - Hazelcast Cluster - and the application logic by applying a &lt;em&gt;client / server&lt;/em&gt; (or in our case &lt;em&gt;client / cluster&lt;/em&gt;) setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For my example, I have two Spring Boot applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;BootifulMember&lt;/code&gt; is a Spring Boot application with a fully auto-configured embedded Hazelcast member.
During application startup, Spring Boot scans the classpath for &lt;code&gt;hazelcast.xml&lt;/code&gt; and automatically instantiates Spring’s
&lt;code&gt;CacheManager&lt;/code&gt; bean backed by &lt;code&gt;HazelcastInstance&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;BootifulMember class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
@EnableCaching  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class BootifulMember {
    public static void main(String[] args) {
        new SpringApplicationBuilder().profiles(&amp;quot;member&amp;quot;).sources(BootifulMember.class).run(args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;An &lt;code&gt;&lt;a href=&quot;https://github.com/EnableCaching&quot;&gt;@EnableCaching&lt;/a&gt;&lt;/code&gt; annotation activates Spring Boot «magic» for &lt;code&gt;Hazelcastinstance&lt;/code&gt; instantiation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BootifulClient&lt;/code&gt; is a Spring Boot web application. It also uses Spring Boot auto configuration for Hazelcast.
But in this case, it scans Spring Configuration for a &lt;code&gt;CacheManager&lt;/code&gt; bean backed by &lt;code&gt;HazelcastClient.newHazelcastClientinstance()&lt;/code&gt; and picks &lt;code&gt;hazelcast-client.xml&lt;/code&gt; from the classpath.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bootiful client application&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
@EnableCaching
public class BootifulClient {
    public static void main(String[] args) {
        new SpringApplicationBuilder().sources(BootifulClient.class).profiles(&amp;quot;client&amp;quot;).run(args);
    }

    @Bean
    public IDummyBean dummyBean() {
        return new DummyBean();     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }

    @Bean
    @Profile(&amp;quot;client&amp;quot;)
    HazelcastInstance hazelcastInstance() {
        return HazelcastClient.newHazelcastClient();    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }

    @Bean
    CacheManager cacheManager() {
        return new HazelcastCacheManager(hazelcastInstance()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }

    @RestController
    static class CityController {

        private final Logger logger = LoggerFactory.getLogger(CityController.class);

        @Autowired
        IDummyBean dummy;   &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

        @RequestMapping(&amp;quot;/city&amp;quot;)
        public String getCity() { &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            String logFormat = &amp;quot;%s call took %d millis with result: %s&amp;quot;;
            long start1 = nanoTime();
            String city = dummy.getCity();
            long end1 = nanoTime();
            logger.info(format(logFormat, &amp;quot;Rest&amp;quot;, TimeUnit.NANOSECONDS.toMillis(end1 - start1), city));
            return city;
        }

        @RequestMapping(value = &amp;quot;city/{city}&amp;quot;, method = RequestMethod.GET) &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        public String setCity(@PathVariable String city) {
            return dummy.setCity(city);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;I’m providing the instance of &lt;code&gt;IDummyBean&lt;/code&gt; in the application context.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;I’m providing &lt;code&gt;HazelcastInstance&lt;/code&gt; based on the client configuration from &lt;code&gt;hazelcast-client.xml&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Spring Framework generated proxies for annotated methods will interact with caches using a &lt;code&gt;CacheManager&lt;/code&gt; class backed by the Hazelcast client instance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Property injection. Don’t do this in your real life applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;I’m measuring the time inside a Rest Controller method and reporting it to the console.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By hitting url &lt;code&gt;&lt;a href=&quot;http://localhost:8081/city/nyc&quot; class=&quot;bare&quot;&gt;http://localhost:8081/city/nyc&lt;/a&gt;&lt;/code&gt;, for example, we’re writing value &lt;code&gt;nyc&lt;/code&gt; to the &lt;code&gt;city&lt;/code&gt; cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By calling the application on &lt;code&gt;&lt;a href=&quot;http://localhost:8081/city&quot; class=&quot;bare&quot;&gt;http://localhost:8081/city&lt;/a&gt;&lt;/code&gt; multiple times, you can take a look at logs in the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;2015-12-31 00:29:16.372  INFO --- c.h.s.c.BootifulClient$CityController: Rest call took 5075 millis with result: Ankara
2015-12-31 00:29:17.986  INFO --- c.h.s.c.BootifulClient$CityController: Rest call took 3 millis with result: Ankara
2015-12-31 00:29:19.008  INFO --- c.h.s.c.BootifulClient$CityController: Rest call took 1 millis with result: Ankara
2015-12-31 00:29:19.936  INFO --- c.h.s.c.BootifulClient$CityController: Rest call took 1 millis with result: Ankara&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You notice that the first call took ~5 sec to return the response.
But in all subsequent calls to this URL, the return the response almost immediately.
We improved our application speed 5000 times!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a tip for production deployment of your «bootiful» application. By running &lt;code&gt;mvn package spring-boot:repackage&lt;/code&gt;, the Spring Boot Maven plugin will generate an executable jar &lt;code&gt;java -jar..&lt;/code&gt; with &lt;code&gt;BootifulMember&lt;/code&gt; as the main class.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;it-s-a-wrap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#it-s-a-wrap&quot;&gt;&lt;/a&gt;It’s a wrap!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congrats!
Now you know how you can benefit from Hazelcast caching auto configuration in Spring Boot applications.
In the next blog post, I will review techniques using JCache — a vendor independent caching API for Java — to enable caching in your Spring Boot application.
Meanwhile, if you have any questions, feel free to post them in the comments section below!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy caching and Happy New Year!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2015/12/29/my-year-at-hazelcast-in-review.html</id>
<title>My Year At Hazelcast In Review</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2015-12-29T17:00:00+00:00</published>
<link href="http://gamov.io/posts/2015/12/29/my-year-at-hazelcast-in-review.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="hazelcast"></category>
<category term="open source"></category>
<category term="jug"></category>
<summary>
TL;DR
It has been an awesome year full traveling (roughly 20 states), POCs for the clients and the prospects, training (including public classes) and conference talks.
While I am already looking forward to 2016, here is a quick recap of my 2015 with Hazelcast.





Table of Contents

Into
Hazelcast Trainings 
Conferences and Events 
Contributions 
Plans for 2016 



Table 1. Revisions history







Version
Date
Comments




v1.2
1/6/2015
Added Groovy Puzzlers Video link from SpringOne 2GX


v1.1
12/31/2015
Added Atlanta JUG video link


v1.0
12/29/2015
Initial blog post






Into


2015 has been a helluva of a year for me, which started off with a new job: the Solutions Architect in Hazelcast - Open Source In-Memory Data Grid company.
In addition to travelling...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/laptop.jpg&quot; alt=&quot;laptop&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
It has been an awesome year full traveling (roughly 20 states), POCs for the clients and the prospects, training (including public classes) and conference talks.
While I am already looking forward to 2016, here is a quick recap of my 2015 with Hazelcast.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#into&quot;&gt;Into&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hazelcast-trainings-span-class-icon-i-class-fa-fa-graduation-cap-i-span&quot;&gt;Hazelcast Trainings &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-graduation-cap&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#events&quot;&gt;Conferences and Events &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#contributions-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;Contributions &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#plans-for-2016-span-class-icon-i-class-fa-fa-expand-i-span&quot;&gt;Plans for 2016 &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-expand&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 60%;&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Revisions history&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3334%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.2&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1/6/2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Added Groovy Puzzlers Video link from SpringOne 2GX&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.1&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12/31/2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Added Atlanta JUG video link&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.0&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12/29/2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initial blog post&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;into&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#into&quot;&gt;&lt;/a&gt;Into&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph lead&quot;&gt;
&lt;p&gt;2015 has been a &lt;em&gt;helluva&lt;/em&gt; of a year for me, which started off with a new job: &lt;a href=&quot;http://next.javaheadbrain.com/posts/2014/12/13/goodbye-farata-hello-hazelcast.html&quot;&gt;the Solutions Architect in Hazelcast&lt;/a&gt; - Open Source In-Memory Data Grid company.
In addition to travelling to over 20 states, I had &lt;a href=&quot;#events&quot;&gt;numerous opportunities&lt;/a&gt; to share my programming experience and how to develop and deploy the distributed systems.
I enjoyed the conference talks, &lt;a href=&quot;http://blog.hazelcast.com/author/viktor-gamov/&quot;&gt;blog posts&lt;/a&gt;, and podcasts (&lt;a href=&quot;http://razbor-poletov.com&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://theartofprogramming.podbean.com/e/выпуск-№100-—-the-art-of-programming-java-learningдва-слова/&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://ctocast.com/post/135596766138/ctocast-15-виктор-гамов-Hazelcast&quot;&gt;3&lt;/a&gt; in Russian).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hazelcast-trainings-span-class-icon-i-class-fa-fa-graduation-cap-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hazelcast-trainings-span-class-icon-i-class-fa-fa-graduation-cap-i-span&quot;&gt;&lt;/a&gt;Hazelcast Trainings &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-graduation-cap&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a part of &lt;a href=&quot;https://hazelcast.com/services/solutions-team/&quot;&gt;the solutions team at Hazelcast&lt;/a&gt;, I lead numerous training engagements for clients and open public classes in many places across the country, including Tampa, FL, Richmond, VA, New York, NY, Jersey City, NJ, Rockville, MD and Cary, NC.
Just a couple months ago we launched our training portal - &lt;a href=&quot;https://university.hazelcast.com/&quot;&gt;Hazelcast University&lt;/a&gt;.
And I’m very pleased to tell you while it wasn’t easy, we did it!
It has been rewarding to receive all the positive comments on the training labs.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;5 minute in someone’s &lt;a href=&quot;https://twitter.com/hashtag/Hazelcast?src=hash&quot;&gt;#Hazelcast&lt;/a&gt; project &lt;a href=&quot;https://t.co/lfoeFNcdtn&quot;&gt;https://t.co/lfoeFNcdtn&lt;/a&gt; Learn from the source &lt;a href=&quot;https://t.co/DivHmCbVrW&quot;&gt;https://t.co/DivHmCbVrW&lt;/a&gt;&lt;/p&gt;— Viktor Gamov (@gAmUssA) &lt;a href=&quot;https://twitter.com/gAmUssA/status/675520617668562944&quot;&gt;December 12, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the way, don’t hesitate to ping me on &lt;a href=&quot;https://twitter.com/gamussa&quot;&gt;Twitter&lt;/a&gt; if you’re interested in attending one of our courses online or in-person.
I might even be able to provide you with discount!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events&quot;&gt;&lt;/a&gt;Conferences and Events &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of my favorite activities in 2015 was getting to speak at many JUGs and conferences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/richmond_jcache.jpg&quot; alt=&quot;50%&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a sampling of some of the places and topics where I presented this year.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Event Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Location&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Topic&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DevNexus 2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Atlanta, GA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Applied real-world projects with Java and JavaScript&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-03-11&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code PaLOUsa&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Louisville, KY&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ground-up Introduction To In-Memory Data&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-04 27-30&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;HUG-NYC Princeton JUG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Online NY/NJ&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hazelcast: In-Memory Data Grid Without Black Magic&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-05-07&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;QCon New York&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;New York, NY&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ground-up Introduction To In-Memory Data&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-06-12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SpringOne 2GX 2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Washington, DC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The Epic Groovy Puzzlers S02: The Revenge of the parentheses&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-09-16&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SpringOne 2GX 2015&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Washington, DC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Spring Framework: The Ultimate Configurations Battle!&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-09-16&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;North Boynton Coders&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Boynton Beach, FL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hazelcast for Java Developers&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-10-21&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Orlando JUG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Orlando, FL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Distributed Caching and JCache&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-10-22&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;GreenJUG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Greenville, SC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hazelcast for Java Developers&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-11-12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Richmond JUG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Richmond, VA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Distributed Caching and JCache&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-11-18&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Atlanta JUG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Atlanta, GA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Distributed Caching with JCache and Beyond&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2015-12-15&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Video from QCon 2015 talk &lt;a href=&quot;http://www.infoq.com/presentations/in-memory-data&quot;&gt;is available&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Video from JCache talk given at Atlanta JUG 12/15/2015&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://player.vimeo.com/video/150375058&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Video from Groovy Puzzlers Talk with (&lt;a href=&quot;https://twitter.com/jbaruch&quot;&gt;&lt;a href=&quot;https://github.com/jbaruch&quot;&gt;@jbaruch&lt;/a&gt;&lt;/a&gt;) &lt;a href=&quot;http://www.infoq.com/presentations/groovy-puzzlers&quot;&gt;is available&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other SpringOne 2GX 2015 talks were recorded and will be available shortly.
Keep an eye on this &lt;a href=&quot;http://www.infoq.com/springone-2gx-2015/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributions-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributions-span-class-icon-i-class-fa-fa-code-fork-i-span&quot;&gt;&lt;/a&gt;Contributions &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When people ask me how one can contribute to an open source project, I suggest starting with something small but valuable like the documentation.
It also helps to understand internal organizational mechanics of the project, the team, and the community.
I did this myself!
One of my first contributions to the project was a contribution to the &lt;a href=&quot;http://hazelcast.org/mastering-hazelcast/&quot;&gt;«Mastering Hazelcast»&lt;/a&gt; book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to learn something more beyond &lt;a href=&quot;http://hazelcast.org/documentation/&quot;&gt;official documentation&lt;/a&gt; (which is awesome. Kudos to the documentation team!) I highly recommend this book by Hazelcast Quality, Stability and Performance team lead &lt;a href=&quot;https://twitter.com/PeterVeentjer&quot;&gt;Peter Veentjer&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I helped the team to improve usability by converting exciting sources from LaTeX to asciidoc. With &lt;a href=&quot;http://asciidoctor.org&quot;&gt;asciidoctor&lt;/a&gt; tool we could render both online, &lt;a href=&quot;https://hazelcast.com/resources/mastering-hazelcast/&quot;&gt;PDF&lt;/a&gt; and &lt;a href=&quot;http://bit.ly/1QWWbrZ&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-book&quot;&gt;&lt;/i&gt;&lt;/span&gt; EPUB&lt;/a&gt; versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another important part of Hazelcast open source infrastructure is the collection of code samples. I contributed &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/pulls?utf8=✓&amp;amp;q=is%3Apr+author%3AgAmUssA&quot;&gt;a number of samples&lt;/a&gt; including Hazelcast integration with &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/mongodb&quot;&gt;MongoDB&lt;/a&gt;, &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/jcache&quot;&gt;JCache&lt;/a&gt; and &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/springboot-caching&quot;&gt;Spring Boot&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Couple months ago, our engineering team &lt;a href=&quot;http://docs.hazelcast.org/docs/protocol/1.0-developer-preview/client-protocol.html&quot;&gt;published&lt;/a&gt; specification of Open Client protocol for Hazelcast.
This enables to anyone from the community to develop Hazelcast for any missing language.
A couple of my team mates (including yours truly) have started &lt;a href=&quot;https://github.com/hazelcast-incubator/hazelcast-nodejs-client&quot;&gt;Hazelcast Node.js client project&lt;/a&gt;.
Currently, it’s in pre-alpha state but it already can connect to Hazelcast cluster and perform some basic IMaps operation.
This is another great way to contribute to this open source project.
Jump in!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;plans-for-2016-span-class-icon-i-class-fa-fa-expand-i-span&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#plans-for-2016-span-class-icon-i-class-fa-fa-expand-i-span&quot;&gt;&lt;/a&gt;Plans for 2016 &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-expand&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m looking forward to expanding the geography of my talks on Distributed Systems and Hazelcast  - We have confirmed the inaugural Hazelcast User Group meet-up for Toronto in February:&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Hey Canada ! It’s actually happening - &lt;a href=&quot;https://twitter.com/hazelcast&quot;&gt;@Hazelcast&lt;/a&gt; User Group &lt;a href=&quot;https://twitter.com/hashtag/Toronto?src=hash&quot;&gt;#Toronto&lt;/a&gt; sponsored by &lt;a href=&quot;https://twitter.com/UXPSystems&quot;&gt;@UXPSystems&lt;/a&gt;!
RSVP &lt;a href=&quot;https://t.co/8jVhXnc3lt&quot;&gt;https://t.co/8jVhXnc3lt&lt;/a&gt;&lt;/p&gt;— Viktor Gamov (@gAmUssA) &lt;a href=&quot;https://twitter.com/gAmUssA/status/676513433701978112&quot;&gt;December 14, 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;I’m coming back to &lt;a href=&quot;https://devnexus.com/s/speakers/4846&quot;&gt;Devnexus 2016&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt; I will participate in one more presentation at DevNexus. My role is to defend XML :( 
&lt;a href=&quot;https://twitter.com/hashtag/devnexus?src=hash&quot;&gt;#devnexus&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gAmUssA&quot;&gt;@gAmUssA&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jbaruch&quot;&gt;@jbaruch&lt;/a&gt; &lt;a href=&quot;https://t.co/5SFd3PxGwW&quot;&gt;pic.twitter.com/5SFd3PxGwW&lt;/a&gt;&lt;/p&gt;— Yakov Fain (@yfain) &lt;a href=&quot;https://twitter.com/yfain/status/674945818130952192&quot;&gt;December 10, 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m already confirmed to join the line-up of awesome speakers at the largest Java conference in Russia- JPoint 2016.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;uk&quot; dir=&quot;ltr&quot;&gt;Анонс конференции &lt;a href=&quot;https://twitter.com/hashtag/JPoint?src=hash&quot;&gt;#JPoint&lt;/a&gt; 2016 &lt;a href=&quot;https://t.co/wmeE8UXLzh&quot;&gt;https://t.co/wmeE8UXLzh&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/java?src=hash&quot;&gt;#java&lt;/a&gt; &lt;a href=&quot;https://twitter.com/JUGru&quot;&gt;@JUGru&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/razborpoletov?src=hash&quot;&gt;#razborpoletov&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Hazelcast?src=hash&quot;&gt;#Hazelcast&lt;/a&gt; &lt;a href=&quot;https://t.co/KdK7vBx5NJ&quot;&gt;pic.twitter.com/KdK7vBx5NJ&lt;/a&gt;&lt;/p&gt;— Viktor Gamov (@gAmUssA) &lt;a href=&quot;https://twitter.com/gAmUssA/status/677336503148814337&quot;&gt;December 17, 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, I encourage you to keep an eye on &lt;a href=&quot;https://hazelcast.com/company/events/&quot;&gt;Hazelcast Events&lt;/a&gt; page.
We’re going to have a lot of exciting stuff in 2016.
Looking forward to 2016 — Happy New Year &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-tree&quot;&gt;&lt;/i&gt;&lt;/span&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2015/11/02/hazelcast-for-mongodb-developers.html</id>
<title>Hazelcast for MongoDB Developers</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2015-11-02T16:31:53-06:00</published>
<link href="http://gamov.io/posts/2015/11/02/hazelcast-for-mongodb-developers.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov &lt;viktor@hazelcast.com&gt;, © 2015 Hazelcast, Inc.</name>
</author>
<summary>
TL;DR
When I talk to the developers about Hazelcast, many of them ask how Hazelcast is different from NOSQL databases, and particularly from MongoDB.
In this blog post, I will try to answer this question once and for all.





Table of content

Introduction
Features

Simplicity
The Benefits For Java Developers
Distributed  Computing
Persistence

IMap and MapStore




Summary





Introduction


MongoDB is an open source, document-oriented database designed with both scalability and developer agility in mind. Instead of storing your data in tables and rows as you would with a relational database, in MongoDB you store JSON-like documents with a dynamic schema.
In short, MongoDB is an NOSQL data store, primarily concerned with storing/persisting and...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/hazelcast_mongo.jpg&quot; alt=&quot;hazelcast mongo&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
When I talk to the developers about Hazelcast, many of them ask how Hazelcast is different from NOSQL databases, and particularly from MongoDB.
In this blog post, I will try to answer this question once and for all.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of content&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#features&quot;&gt;Features&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#simplicity&quot;&gt;Simplicity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-benefits-for-java-developers&quot;&gt;The Benefits For Java Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#distributed-computing&quot;&gt;Distributed  Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#persistence&quot;&gt;Persistence&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#code-imap-code-and-code-mapstore-code&quot;&gt;&lt;code&gt;IMap&lt;/code&gt; and &lt;code&gt;MapStore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; is an open source, document-oriented database designed with both scalability and developer agility in mind. Instead of storing your data in tables and rows as you would with a relational database, in MongoDB you store JSON-like documents with a dynamic schema.
In short, MongoDB is an NOSQL data store, primarily concerned with storing/persisting and retrieving schema-free data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast is an open source (Apache v2 license), distributed, highly available and scalable In-Memory Data Grid used as an in-memory data store, cache, message broker and distributed computation platform.
Hazelcast emphasizes high-speed access to distributed data (usually as a distributed cache), distributed computing and distributed messaging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://hazelcast.com/use-cases/nosql/nosql-data-store/&quot;&gt;Hazelcast can act like an NOSQL store&lt;/a&gt;. MongoDB has some data grid / compute grid capabilities, but it isn’t optimized. As such, comparing Hazelcast and MongoDB head-to-head on capabilities is a bit like comparing apples and oranges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often Hazelcast and MongoDB work together, rather than compete. Hazelcast supports using MongoDB as a backend data store. It’s easy to map Hazelcast data to MongoDB for write-through or write-behind persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s overview Hazelcast and MongoDB features and see how they can compliment each other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simplicity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simplicity&quot;&gt;&lt;/a&gt;Simplicity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both technologies are simple to get running.
I was able to get MongoDB up and running in less than ten minutes.
For example, on my mac I can install MongoDВ with command using &lt;strong&gt;&lt;a href=&quot;http://brew.sh&quot;&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;brew mongo install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://hazelcast.org/getting-started/&quot;&gt;Hazelcast is similarly easy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-benefits-for-java-developers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-benefits-for-java-developers&quot;&gt;&lt;/a&gt;The Benefits For Java Developers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re writing a Java application (or any of the various languages that run on the JVM), Hazelcast and MongoDB fit into your ecosystem extremely well.
For Hazelcast, being able to use Java objects directly in the cluster without worrying about a data translation layer is a big productivity bonus.
Working with MongoDB requires either using their data structures or writing/configuring a data translation layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The BSON library comprehensively supports BSON, the data storage and network transfer format that MongoDB uses for &amp;quot;documents&amp;quot;. BSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MongoDB ships with a driver for Java.
Also, there is a Java Object Document Mapper framework that makes the translation from Mongo documents to Java objects and vise-verse much easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In terms of deployment and integration in Java applications, Hazelcast can give you very low latency data access through various mechanisms, especially Near Cache on Hazelcast clients and embedded deployment of Hazelcast members. With MongoDB, network latency will be experienced, since it doesn’t have a local memory cache.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;distributed-computing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#distributed-computing&quot;&gt;&lt;/a&gt;Distributed  Computing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast’s distributed computing framework is extremely powerful.
It allows arbitrary business logic to execute with the locality of reference, and be distributed across the cluster for straightforward scale-out support.
MongoDB supports a single-threaded map-reduce framework but doesn’t support arbitrary user code execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast’s support for distributed computing gives it capabilities that MongoDB just doesn’t have.
Distributed concurrency tools like locks, semaphores, and queues make short work of coordinating computation on multiple nodes that is very difficult to implement natively.
I know that many people use MongoDB as their message broker.
However, I can’t imagine how one does any of those things practically using just MongoDB.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;persistence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#persistence&quot;&gt;&lt;/a&gt;Persistence&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hazelcast is focused on low-latency access to distributed data and distributed computing.
By default, it doesn’t touch a disk or any other persistent store.
Hazelcast isn’t a database.
MongoDB is very much a persistent database.
It has its issues with persistence (e.g., it can be a bit fragile since it writes to memory and, by default, doesn’t sync to the file system on every write).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s take a look how we can benefit from MongoDB persistence with Hazelcast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;code-imap-code-and-code-mapstore-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-imap-code-and-code-mapstore-code&quot;&gt;&lt;/a&gt;&lt;code&gt;IMap&lt;/code&gt; and &lt;code&gt;MapStore&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A corner store of Hazelcast’s read-through / write-thought capabilities are two interfaces &lt;code&gt;MapLoader&lt;/code&gt; and &lt;code&gt;MapStore&lt;/code&gt;. A developer needs to implement &lt;code&gt;MapLoader&lt;/code&gt; interface if only reads from database are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MapLoader inteface&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface MapLoader&amp;lt;K, V&amp;gt; {

    V load(K key); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    Map&amp;lt;K, V&amp;gt; loadAll(Collection&amp;lt;K&amp;gt; keys); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    Iterable&amp;lt;K&amp;gt; loadAllKeys(); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Loads the value of a given key. If distributed map doesn’t contain the value for the given key then Hazelcast will call implementation’s load (key) method to obtain the value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Loads given keys. This is batch load operation so that implementation can optimize the multiple loads.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Loads all of the keys from the store.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;MapStore&lt;/code&gt; interface extends &lt;code&gt;MapLoader&lt;/code&gt; and allows to save &lt;code&gt;IMap&lt;/code&gt; entries in a database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MapStore Interface&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface MapStore&amp;lt;K, V&amp;gt; extends MapLoader&amp;lt;K, V&amp;gt; {

    void store(K key, V value); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    void storeAll(Map&amp;lt;K, V&amp;gt; map); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    void delete(K key); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

    void deleteAll(Collection&amp;lt;K&amp;gt; keys); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Stores the key-value pair.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Stores multiple entries. Implementation of this method can optimize the store operation by storing all entries in one database connection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Deletes the entry with a given key from the store.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Deletes multiple entries from the store.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn about &lt;code&gt;MapLoader&lt;/code&gt; and &lt;code&gt;MapStore&lt;/code&gt;, please, check official &lt;a href=&quot;http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#map-persistence&quot;&gt;Hazelcast documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To interact with MongoDB, I’m going to use &lt;code&gt;mongo-java-driver&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Mongo Java Driver dependency&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;mongo-java-driver&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;${mongo-java-driver.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;MongoClient mongoClient = new MongoClient(new MongoClientURI(mongoUrl)); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
MongoCollection collection = mongoClient.getDatabase(dbName).getCollection(collectionName); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
final Document document = (Document) collection.find(eq(&amp;quot;_id&amp;quot;, key)).first(); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
collection.insertOne(document); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Establishing connection to MondoDb instance based on URI like &lt;code&gt;mongodb://localhost:27017&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;MongoClient&lt;/code&gt; class provides methods to connect to MongoDB instance, get access to databases, collections, documents and etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;MongoCollection&lt;/code&gt; class allows to CRUD operations on Documents in collection.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a full source code of example application &lt;a href=&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/mongodb&quot;&gt;in &lt;code&gt;hazelcast-code-samples&lt;/code&gt; repository&lt;/a&gt;. In this repository, you can find a ton of useful Hazelcast samples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MongoDB and Hazelcast can both provide low-latency access to distributed, schema-free data.
MongoDB is more suitable if you’re just looking for an NOSQL data store.
Hazelcast’s distributed data structures, and computing capabilities lend themselves to a host of applications beyond what MongoDB is capable.
They can be used separately as solutions for different problems or together as a complementary set of technologies.
I hope in this blog post I answered most of the questions about Hazelcast v. MongoDB.
If I didn’t, please, ask me in the comments below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2015/01/27/ground-up-introduction-to-in-memory-data.html</id>
<title>Ground-up Introduction To In-Memory Data</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2015-01-27T22:00:00+00:00</published>
<link href="http://gamov.io/posts/2015/01/27/ground-up-introduction-to-in-memory-data.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="hazelcast"></category>
<category term="imdg"></category>
<summary>
Table of Contents

Brief Agenda Of A Workshop
Intrigued ?











TL;DR
This April, I&#8217;m going to deliver half-day workshop «Ground-up Introduction To In-Memory Data» at Code PaLOUsa conference in Louisville, KY.





You&#8217;re an architect or a developer with years of experience creating amazing applications. You&#8217;ve just been assigned to a gasp low latency project! Because you&#8217;re an expert, you&#8217;re expected to master a new In-Memory caching/data technology and be productive from day 1. You feel completely lost as you open the JAR files. Not only that, but you have to contend with new topologies and data stores like NoSQL or Hadoop.


Trust me, it&#8217;s not as...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#brief-agenda-of-a-workshop&quot;&gt;Brief Agenda Of A Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#intrigued&quot;&gt;Intrigued ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
This April, &lt;a href=&quot;http://codepalousa.com/blog/2015/code-palousa-2015-session-listing/&quot;&gt;I’m going to deliver&lt;/a&gt; half-day workshop «Ground-up Introduction To In-Memory Data» at &lt;a href=&quot;http://codepalousa.com&quot;&gt;Code PaLOUsa&lt;/a&gt; conference in Louisville, KY.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You’re an architect or a developer with years of experience creating amazing applications. You’ve just been assigned to a &lt;strong&gt;gasp&lt;/strong&gt; low latency project! Because you’re an expert, you’re expected to master a new &lt;em&gt;In-Memory caching/data technology&lt;/em&gt; and be productive from &lt;strong&gt;day 1&lt;/strong&gt;. You feel completely lost as you open the JAR files. Not only that, but you have to contend with new topologies and data stores like NoSQL or Hadoop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Trust me, it’s not as bad as it appears and setting up in-memory data is NOT as hard as you think. This hands-on workshop will cover the things you need to know to be successful on your first low latency in-memory based project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;brief-agenda-of-a-workshop&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#brief-agenda-of-a-workshop&quot;&gt;&lt;/a&gt;Brief Agenda Of A Workshop&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a brief agenda of this 1/2 Day Session:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The In-Memory landscape you need to know&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Four Distributed Data Topologies that work well&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making In-Memory Reliable, Scalable and Durable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When to go NoSQL or not&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Techniques for Really Big In-Memory Data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=zBaKtAQqfMo&quot;&gt;Enough talk&lt;/a&gt; - &lt;strong&gt;Hands-on workshop&lt;/strong&gt;: In-Memory Alive and You Did it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intrigued&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intrigued&quot;&gt;&lt;/a&gt;Intrigued ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure that you’re following &lt;a href=&quot;https://twitter.com/CodePaLOUsa&quot;&gt;conference&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gamussa&quot;&gt;me&lt;/a&gt; on twitter for updates. &lt;a href=&quot;http://codepalousa.com/plan/event-location/&quot;&gt;See you in Louisville, KY!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2014/12/13/goodbye-farata-hello-hazelcast.html</id>
<title>Goodbye, Farata. Hello, Hazelcast!</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2014-12-13T00:00:00+00:00</published>
<link href="http://gamov.io/posts/2014/12/13/goodbye-farata-hello-hazelcast.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="hazelcast"></category>
<category term="job"></category>
<category term="farata"></category>
<summary>
Go for it now. The future is promised to no one.



&#8212; Wayne Dyer














TL;DR
Monday, December 15, I&#8217;m staring my new role as Solutions Architect at Hazelcast.





I&#8217;ve had a great time at Farata Systems over the past 4 years and 3 months. It was my first workplace in US, and it was incredible place to work. During that period, I learned so many technologies, tools, frameworks and even languages so I can say with confidence that it was quite a ride!


I joined Farata as Senior RIA (who does remember that abbreviation?) Developer in 2010. I&#8217;ve helped financial institutions and startups of New...
</summary>
<content type="html">
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go for it now. The future is promised to no one.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Wayne Dyer
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center;float: right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/HazelcastLogo-Blue_Dark_1200w.png&quot; alt=&quot;hazelcast&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
Monday, December 15, I’m staring my new role as Solutions Architect at &lt;a href=&quot;http://hazelcast.com&quot;&gt;Hazelcast&lt;/a&gt;.&lt;br /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://pleer.com/tracks/4445417GRwk&quot;&gt;I’ve had a great time&lt;/a&gt; at &lt;a href=&quot;http://faratasystems.com&quot;&gt;Farata Systems&lt;/a&gt; over the past 4 years and 3 months. It was my first workplace in US, and it was incredible place to work. During that period, I learned so many technologies, tools, frameworks and even languages so I can say with confidence that it was quite a ride!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I joined Farata as Senior RIA (who does remember that abbreviation?) Developer in 2010. I’ve helped financial institutions and startups of New York area to build awesome applications with Flex technology. After Adobe abandoned Flex, my colleagues and me dove into the deep blue sea of HTML5. We have learned a lot, and we have generously &lt;a href=&quot;http://github.com/yfain/WebDevForJavaProgrammers&quot;&gt;shared our findings&lt;/a&gt; with a community. We wrote &lt;a href=&quot;http://enterprisewebbook.com/&quot;&gt;«Enterprise Web Development»  book&lt;/a&gt; - a quintessence of our research and consulting work in a field of modern web development in the big companies.
I’m very grateful to the founders of Farata - &lt;a href=&quot;http://twitter.com/yfain&quot;&gt;Yakov&lt;/a&gt;, Victor and Anatole - for everything that I learned from them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, you get a chance in your life that you should not miss. Otherwise, you will regret it later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monday is my first day at &lt;a href=&quot;http://hazelcast.com&quot;&gt;Hazelcast&lt;/a&gt;, a leading in-memory data grid company with HQ in Palo Alto, California. I want say huge thanks to &lt;a href=&quot;https://twitter.com/fuadm&quot;&gt;Fuad&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/oztalip&quot;&gt;Talip&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gregrluck&quot;&gt;Greg&lt;/a&gt; for the opportunity to grow with the company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m very excited to join the Hazelcast Engineering Team as Solutions Architect. I will be responsible for help our East Coast clients to build better software using our product (both &lt;a href=&quot;http://hazelcast.org&quot;&gt;open-source part&lt;/a&gt;, and &lt;a href=&quot;http://hazelcast.com/products/hazelcast-enterprise/&quot;&gt;the commercial extensions&lt;/a&gt;).
Ultimately, I’ll be doing the pretty much same sorts of things I’ve been doing of the past couple years - write code, talk on the conferences, meetups and user groups, run workshops, and create videos - to show the developers how to use Hazelcast more efficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will do my best to keep you posted here with what I learn. Saying that, expect there will be more technical articles from me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wish me the best of luck!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;p.s.&lt;/strong&gt; If you have any questions regarding Hazelcast technology, feel free to contact me &lt;code&gt;viktor at hazelcast dot com&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2013/07/17/getting-started-with-nashorn.html</id>
<title>Getting Started With Nashorn</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2013-07-17T23:00:00+00:00</published>
<link href="http://gamov.io/posts/2013/07/17/getting-started-with-nashorn.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="nashorn"></category>
<category term="javascript"></category>
<category term="java"></category>
<summary>
TL;DR
You can download Early Access Release of JDK8 which include nashorn.jar and jjs JavaScript shell. Add JDK bin directory to PATH with command:
export JAVA_HOME=$(/usr/libexec/java_home -v 1.8); export PATH=$JAVA_HOME/bin:$PATH
Type jjs and enter to a JavaScript REPL












THIS IS A DRAFT!





Table of Contents

Getting Nashorn&#8217;s sources
Build Nashorn For JDK 8
Running
Using Nashorn with JDK7



While preparing to my JavaOne 2013 talk, I decide to write down some notes about my progress, tip and tricks that descover during my experiments. Consider it as my roadtrip notes.
As you learned from my previous post, I&#8217;m going to talk about Nashorn - JavaScript engine 100% written in Java. Nashorn will...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TL;DR&lt;/div&gt;
You can &lt;a href=&quot;https://jdk8.java.net/download.html&quot;&gt;download&lt;/a&gt; Early Access Release of JDK8 which include nashorn.jar and jjs JavaScript shell. Add JDK &lt;em&gt;bin&lt;/em&gt; directory to PATH with command:&lt;br /&gt;
&lt;code&gt;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8); export PATH=$JAVA_HOME/bin:$PATH&lt;/code&gt;&lt;br /&gt;
Type &lt;code&gt;jjs&lt;/code&gt; and enter to a JavaScript &lt;a href=&quot;http://en.wikipedia.org/wiki/REPL&quot;&gt;REPL&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
THIS IS A DRAFT!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#getting-nashorn-s-sources&quot;&gt;Getting Nashorn’s sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#build-nashorn-for-jdk-8&quot;&gt;Build Nashorn For JDK 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#running&quot;&gt;Running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-nashorn-with-jdk7&quot;&gt;Using Nashorn with JDK7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While preparing to &lt;a href=&quot;https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793&quot;&gt;my JavaOne 2013 talk&lt;/a&gt;, I decide to write down some notes about my progress, tip and tricks that descover during my experiments. Consider it as my roadtrip notes.
As you learned from my previous post, I’m going to talk about Nashorn - JavaScript engine 100% written in Java. Nashorn will replace Mozilla Rhino in upcoming JDK8. But even today, Nashorn overperfom Rhino in bunch of test. As Rhino, Nashorn is implementing JSR 223: Scripting for the JavaTM Platform. But we will get there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-nashorn-s-sources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-nashorn-s-sources&quot;&gt;&lt;/a&gt;Getting Nashorn’s sources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Prerequisities&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sourcetreeapp.com/&quot;&gt;&lt;strong&gt;SourceTree.app&lt;/strong&gt;&lt;/a&gt; to download sources from OpenJDK repository. We don’t to mess around with command line tools for Mercurial. And SourceTree available for OSX and Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://ant.apache.org/&quot;&gt;Apache Ant&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also you need Mozilla Rhino if you want to run benchmarks to compare Nashorn and Rhino&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;build-nashorn-for-jdk-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#build-nashorn-for-jdk-8&quot;&gt;&lt;/a&gt;Build Nashorn For JDK 8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install JDK 8 from &lt;a href=&quot;http://jdk8.java.net/download.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use JDK 8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd make&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ant clean; ant&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grab latest jar from &lt;em&gt;dist/nashorn.jar&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running&quot;&gt;&lt;/a&gt;Running&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using-nashorn-with-jdk7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#using-nashorn-with-jdk7&quot;&gt;&lt;/a&gt;Using Nashorn with JDK7&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;clone &lt;a href=&quot;https://bitbucket.org/ramonza/nashorn-backport&quot;&gt;Nashorn JDK7 backport&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build similarly to JDK8 version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;append boot classpath with&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Augment JDK boot class path with backport Nashonr jar&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;export JAVA_OPTS=&amp;quot;-Xbootclasspath/a:/YOUR_PATH_TO_NASHORN-BACKPORT_DIR/dist/nashorn.jar&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2013/07/09/im-speaking-at-javaone.html</id>
<title>I&#8217;m speaking at JavaOne 2013</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2013-07-09T01:00:00+00:00</published>
<link href="http://gamov.io/posts/2013/07/09/im-speaking-at-javaone.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="javaone"></category>
<category term="javascript"></category>
<summary>
New achievement unlocked - I&#8217;m going to deliver the talk at JavaOne 2013!
This year I will be talking about very demanding and interesting topic for me - about integration Java and JavaScript.


Here is quick abstract of my [BOF5793] session:




There is a perception in the Java community that JavaScript is a second-rate interpreted language whose main purpose is to make Web pages a little prettier. But JavaScript is actually a powerful, flexible, dynamically typed language. And today the language has been experiencing a revival driven by the interest in HTML5. Nashorn is a modern JavaScript engine available on the JVM, and...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New achievement unlocked - I’m going to deliver the talk at JavaOne 2013!
This year I will be talking about very demanding and interesting topic for me - about integration Java and JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is quick abstract of my &lt;strong&gt;[BOF5793]&lt;/strong&gt; session:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a perception in the Java community that JavaScript is a second-rate interpreted language whose main purpose is to make Web pages a little prettier. But JavaScript is actually a powerful, flexible, dynamically typed language. And today the language has been experiencing a revival driven by the interest in HTML5. Nashorn is a modern JavaScript engine available on the JVM, and it’s already included with JDK8 builds. This presentation is about building polyglot applications with Java and JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially, during this talk I will demonstrate how to leverage Java API from JavaScript and use both languages side-by-side in real-world use-cases like servlet programming, RESTful WebServices and etc. I have couple ideas regarding the examples for this sessions. I definitely will report about my experiments in this blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock radius small-4 small-centered columns&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/javascript.png&quot; alt=&quot;javascript&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find details about this session the &lt;a href=&quot;https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793&quot;&gt;JavaOne website&lt;/a&gt;.
Keep in touch for updates by following me on &lt;a href=&quot;http://twitter.com/gAmUssA&quot;&gt;twitter&lt;/a&gt; and I hope to see you in San Francisco in September.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2013/02/05/prouctive-enterprise-web-dev-with-cdb.html</id>
<title>Productive Enterprise Web Development with ExtJS and Clear Data Builder</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2013-02-05T00:00:00+00:00</published>
<link href="http://gamov.io/posts/2013/02/05/prouctive-enterprise-web-dev-with-cdb.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov&lt;viktor.gamov@faratasystems.com&gt;</name>
</author>
<category term="java"></category>
<category term="extjs"></category>
<category term="sencha"></category>
<category term="cdb"></category>
<summary>
It will not likely that you will start developing an enterprise HTML5 applications without using one of the JavaScript frameworks.
One of the most feature-complete frameworks is ExtJS from Sencha, but its learning curve is a bit steep. Our company, Farata Systems, has developed an open source software Clear Toolkit for ExtJS.
Clear Toolkit includes an Eclipse plugin called Clear Data Builder (CDB).
It is a productivity tool - a code generator - that can create a CRUD application for you in no time. This application will have HTML/JavaScript/ExtJS client and Java-based server. In this article, you will learn how jumpstart development of...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will not likely that you will start developing an enterprise HTML5 applications without using one of the JavaScript frameworks.
One of the most feature-complete frameworks is &lt;a href=&quot;http://www.sencha.com/products/extjs&quot;&gt;ExtJS&lt;/a&gt; from Sencha, but its learning curve is a bit steep. Our company, &lt;a href=&quot;http://faratasystems.com&quot;&gt;Farata Systems&lt;/a&gt;, has developed an open source software Clear Toolkit for ExtJS.
Clear Toolkit includes an Eclipse plugin called Clear Data Builder (CDB).
It is a productivity tool - a code generator - that can create a CRUD application for you in no time. This application will have HTML/JavaScript/ExtJS client and Java-based server. In this article, you will learn how jumpstart development of such Web applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#part-one-extjs-mvc-application-scaffolding&quot;&gt;Part One: ExtJS MVC Application Scaffolding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#part-two-generating-a-crud-application&quot;&gt;Part Two: Generating a CRUD application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#part-three-data-pagination&quot;&gt;Part Three: Data Pagination&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#additional-useful-links&quot;&gt;Additional Useful Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-one-extjs-mvc-application-scaffolding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#part-one-extjs-mvc-application-scaffolding&quot;&gt;&lt;/a&gt;Part One: ExtJS MVC Application Scaffolding&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In part one I will cover the following topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is Clear Toolkit for ExtJS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to create ExtJS MVC application for Java-based project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to deploy and run your first ExtJS+Java application on Apache Tomcat server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clear Toolkit for ExtJS contains following parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Clear Data Builder - Eclipse plugin that supports code generation ExtJS MVC artifacts based on Java code. CDB comes with wizards to start a new project with plain Java or with popular frameworks like Hibernate, Spring, MyBatis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear JS - set of JavaScript components that extends ExtJS standard components. E.g. Clear JS contains ChangeObject - a universal way to trace the state changes between old and new versions of the same item in a store.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear Runtime - Java components implement server side part of &lt;code&gt;ChangeObject&lt;/code&gt;, &lt;code&gt;DirectOptions&lt;/code&gt; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The phrase &amp;quot;to be more productive&amp;quot; means to write less code and produce the results faster.
This is what CDB for. In this article, you will see how Clear Data Builder helps you to integrate the client side with the back end using the RPC style and how to implements data pagination for your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CDB distribution is available as a plug-in for Eclipse IDE. The current update site of CDB located &lt;a href=&quot;http://cleartoolkit.com/downloads/plugins/extjs/cleardatabuilder/4.1.4/&quot;&gt;here&lt;/a&gt;.  The current version is 4.1.4 (don’t be surprised - this is a five-year-old code generator, and its previous versions were made for generating the UI for Adobe Flex framework). You can install this plug-in via Install New Software menu in Eclipse IDE. The &lt;a href=&quot;#FIG-1&quot;&gt;Verifying CDB installation&lt;/a&gt; shows how you can validate the plug-in installation. If you see &amp;quot;Clear Data Builder for Ext JS feature&amp;quot; in the list of Installed Software in your Eclipse IDE, you are good to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You have to have &amp;quot;Eclipse for Java EE Developers&amp;quot; installed, which includes the plugins for automation of the Web applications.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-1&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_01.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Verifying CDB installation&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clear Data Builder comes with a set of prepared examples that demonstrate the integration with popular Java frameworks - MyBatis, Hibernate, and Spring. Also, a plain Java project example that doesn’t use any of the frameworks is available as well. Let’s start with the creation of the new project by selecting the menu File → New → Other → Clear, and then press Next.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-2&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_02.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. New CDB Project Wizard&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all let’s call the new project episode_1_intro. CDB supports different ways of linking the ExtJS framework to the application. In my case, I already have installed ExtJS libraries under my Web server (Apache Tomcat). We are going to use this local ExtJS URL, but you can just specify any folder in your machine, and CDB will copy the ExtJS file inside your project. Lastly, you can use ExtJS from the Sencha’s CDN, if you do not want to store these libraries inside your project. Besides, using a common CDN allows a Web browser to reuse the cached version of ExtJS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this project, we are not going to use any server-side (like MyBatis or Hibernate). Just click the button Finish. First of all, CDB prints some initial messages on the Eclipse console. When CDB runs for the first time, it initializes directory structure in the WebContent folder. Inside the WebContent directory, CDB creates a directory structure which is recommended by Sencha for MVC applications. Also, you’ll get the HTML wrapper - index.html - for this application, which contains the link to the entry point of our application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CDB generates an empty project with one sample controller and one view - Viewport.js. To run this application, you need to add the newly generated Dynamic Web Project to Tomcat and start the server (right-click on the Tomcat in the Servers view).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-3&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_03.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Adding web project to Tomcat&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me switch to a web browser to open this application on http://localhost:8080/episode_1_intro . Voila! Just in couple minutes we have setup new Dynamic Web Project with the ExtJS framework support and one fancy button on UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-4&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_04.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Running scaffolded application&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is to make something useful out of this basic application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-two-generating-a-crud-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#part-two-generating-a-crud-application&quot;&gt;&lt;/a&gt;Part Two: Generating a CRUD application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CRUD stands for Create-Retrieve-Update-Delete. It’s a well known term for describing the applications that support data manipulation. They can retrieve the data from some data source and update them too. The Part Two agenda is covering exactly this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a simple CRUD ExtJS+Java application&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a POJO and corresponding &lt;code&gt;Ext.data.Model&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create s Java service and populate &lt;code&gt;Ext.data.Store&lt;/code&gt; with data from service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the auto-generated ExtJS application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extend the auto-generated CRUD methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;strong&gt;ChangeObject&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I would like to show how to use Clear Data Builder to create CRUD applications. I’ll show you how you can turn your Java POJO class into the ExtJS model. I’ll explain the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;how you can populate the ExtJS store from a remote service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how you can use automatically generated UI for that application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how you can extend it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;what the &lt;code&gt;ChangeObject&lt;/code&gt; class is for&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will extend the application from Part 1. For my CRUD application I need a Java POJO.  First, I’ve created the class Person.java in the package &lt;code&gt;dto&lt;/code&gt;. Then I’ve added the fields &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;ssn&lt;/code&gt; and &lt;code&gt;phone&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;. Also I need getters and setters for these fields. It’s good to have a constructor for the that uses these fields,  and a DTO class should have a &lt;code&gt;toString()&lt;/code&gt; method. &lt;a href=&quot;#LISTING_1&quot;&gt;Person data transfer object&lt;/a&gt;
Now I need the same corresponding ExtJS model for my Person. Just annotate this class with the CDB annotation called &lt;code&gt;&lt;a href=&quot;https://github.com/JSClass&quot;&gt;@JSClass&lt;/a&gt;&lt;/code&gt; to ask CDB to generate the ExtJS model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_1&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Person data transfer object&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package dto;

import com.farata.dto2extjs.annotations.JSClass;
import com.farata.dto2extjs.annotations.JSGeneratedId;

@JSClass
public class Person {

	@JSGeneratedId
	private Integer id;
	private String firstName;
	private String lastName;
	private String phone;
	private String ssn;

	public Person(Integer id, String firstName, String lastName, String phone,
			String ssn) {
		super();
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.phone = phone;
		this.ssn = ssn;
	}

	// Getters and Setter are omitted

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I need to annotate the &lt;code&gt;id&lt;/code&gt; field with the CDB annotation &lt;code&gt;&lt;a href=&quot;https://github.com/JSGeneratedId&quot;&gt;@JSGeneratedId&lt;/a&gt;&lt;/code&gt;. With this annotation I’ll instruct CDB to threat this field as auto generated id. Let’s examine the directory of ExtJS MVC application and lets take a look inside the model folder. Inside the model folder (the JavaScript section) we have the folder dto which corresponds to the Java dto package where the class Person.java resides.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-5&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_05.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Generated from Java class ExtJS model&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see Clear Data Builder generated two files as recommended by the &lt;a href=&quot;http://martinfowler.com/dslCatalog/generationGap.html&quot;&gt;Generation Gap pattern&lt;/a&gt;, which is about keeping the generated and handwritten parts separate by putting them in different classes linked by inheritance. Let’s open the person model. In our case the Person.js is extended from the generated _Person.js. Should we need to customize this class, we’ll do it inside the Person.js, but this underscore-prefixed file will be regenerated each and every time when we change something in our model. CDB follows this pattern for all generated artifacts - Java services, ExtJS models and stores. This model contains all the fields from our Person DTO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to create a Java service to populate the ExtJS store with the data. Let’s create an interface &lt;code&gt;PersonService&lt;/code&gt; in the package &lt;code&gt;service&lt;/code&gt;. This service will to return the list of persons. This interface contains one method -&lt;code&gt;List&amp;lt;Person&amp;gt; getPersons()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I need to ask CDB to expose this service as a remote object, which is done by the annotation called &lt;code&gt;&lt;a href=&quot;https://github.com/JSService&quot;&gt;@JSService&lt;/a&gt;&lt;/code&gt;.  Another annotation &lt;code&gt;&lt;a href=&quot;https://github.com/JSGenetareStore&quot;&gt;@JSGenetareStore&lt;/a&gt;&lt;/code&gt; will instruct CDB to generate the store. In this case CDB will create the &lt;em&gt;destination-aware store&lt;/em&gt;. This means that store will know from where to populate its content. All configurations of the store’s proxies will be handled by the code generator. With &lt;code&gt;&lt;a href=&quot;https://github.com/JSFillMethod&quot;&gt;@JSFillMethod&lt;/a&gt;&lt;/code&gt; annotation we will identify our main read method (remember the &amp;quot;R&amp;quot; from CRUD).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also it would be nice to have some sort of UI to test the service - the annotation &lt;code&gt;&lt;a href=&quot;https://github.com/JSGenerateSample&quot;&gt;@JSGenerateSample&lt;/a&gt;&lt;/code&gt; will help here. CDB will examine the interface &lt;code&gt;PersonService&lt;/code&gt;, and based on these annotations will generate all ExtJS MVC artifacts (models, views, controller) with the sample application.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_2&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;PersonService interface annotated with CDB annotations&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@JSService
public interface PersonService {
    @JSGenerateStore
    @JSFillMethod
    @JSGenerateSample
    List&amp;lt;Person&amp;gt; getPersons();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the code generation is complete, you’ll get the implementation for the service - &lt;code&gt;PersonServiceImpl&lt;/code&gt;. The store folder inside the application folder (WebContent\app) has the store, which is bound to the Person model. And my person model was generated previously. In this case, Clear Data Builder generated store that binds to the remote service.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-6&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_06.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Structure of store and model folders&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All this intermediate translation from the JavaScript to Java and from Java to JavaScript done by DirectJNgine, which is the server side implementation of the Ext Direct Protocol. You can read about this protocol in &lt;a href=&quot;http://www.sencha.com/products/extjs/extdirect&quot;&gt;Ext JS documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one more thing not to be missed - Clear Data Builder generated a UI for us!  Check out the samples directory shown on &lt;a href=&quot;#FIG-7&quot;&gt;Folder with generated samples&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-7&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_07.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. Folder with generated samples&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the SampleController and SampleGrid panel inside the samples folder. CDB also generates the JavaScript application entry point - sampleApp.js. To test this application just copy the file  SampleController.js into the controller folder, SampleGrid.js panel into the view folder, and the sample application in the root of our WebContent folder. We need to change the application entry point with sampleApp in index.html.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;sampleApp.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how the generated UI of the sample application looks like &lt;a href=&quot;#FIG-7&quot;&gt;Folder with generated samples&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-8&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_08.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. Scaffolded CRUD application template&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s return to the server side code. For services CDB also follows the &lt;em&gt;Generation Gap Pattern&lt;/em&gt; and it generated stubs for the service methods. Override these methods when you’re ready to implement the CRUD functionality  &lt;a href=&quot;#LISTING_3&quot;&gt;Implementation of PersonService interface&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_3&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Implementation of PersonService interface&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package service;
import java.util.ArrayList;
import java.util.List;

import clear.data.ChangeObject;
import dto.Person;
import service.generated.*;

public class PersonServiceImpl extends _PersonServiceImpl { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

	@Override
	public List&amp;lt;Person&amp;gt; getPersons() {				&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
		List&amp;lt;Person&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
		Integer id= 0;
		result.add(new Person(++id, &amp;quot;Joe&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;555-55-55&amp;quot;, &amp;quot;1111-11-1111&amp;quot;));
		result.add(new Person(++id, &amp;quot;Joe&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;555-55-55&amp;quot;, &amp;quot;1111-11-1111&amp;quot;));
		result.add(new Person(++id, &amp;quot;Joe&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;555-55-55&amp;quot;, &amp;quot;1111-11-1111&amp;quot;));
		result.add(new Person(++id, &amp;quot;Joe&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;555-55-55&amp;quot;, &amp;quot;1111-11-1111&amp;quot;));
		return result;		&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
	}

	@Override
	public void getPersons_doCreate(ChangeObject changeObject) {  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
		Person dto = (Person) deserializeObject(
				(Map&amp;lt;String, String&amp;gt;) changeObject.getNewVersion(),
				Person.class);

		System.out.println(dto.toString());
	}

	@Override
	public void getPersons_doUpdate(ChangeObject changeObject) {	&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
		// TODO Auto-generated method stub
		super.getPersons_doUpdate(changeObject);
	}

	@Override
	public void getPersons_doDelete(ChangeObject changeObject) {	&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
		// TODO Auto-generated method stub
		super.getPersons_doDelete(changeObject);
	}

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We need to extend the generated method and provide the actual implementation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;getPerson&lt;/code&gt; is our retrieve method (the R in CRUD) .&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For this sample application we can use java.util.ArrayList class as in-memory server side storage of the &lt;code&gt;Person&lt;/code&gt; objects. In real world applications you’d use a database or other persistent storage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;fillmethod+&lt;code&gt;doCreate()&lt;/code&gt; is our create method (the C in CRUD).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;fillmethod+&lt;code&gt;doUpdate&lt;/code&gt; is our update method (the U in CRUD).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;fillmethod+&lt;code&gt;doDelete&lt;/code&gt; is our delete method (the D in CRUD).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the Load menu and you’ll get 4 persons from our server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate the rest of the CRUD methods we’ll ask the user to insert one new row, modify three existing ones and remove two rows using the generated Web client. The &lt;code&gt;Clear.data.DirectStore&lt;/code&gt; object will automatically create a collection of six `ChangeObject`s - one to represent a new row, three to represent the modified ones, and two for the removed rows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the user clicks on the Sync menu the changes will be sent to the corresponding &lt;code&gt;do…​&lt;/code&gt; remote method. When you &lt;code&gt;sync()&lt;/code&gt; a standard &lt;code&gt;Ext.data.DirectStore&lt;/code&gt; ExtJS is POST-ing new, modified and deleted items to the server. When the request is complete the server’s reply data is applied to the store, expecting that some items can be modified by the server. In case of &lt;code&gt;Clear.data.DirectStore&lt;/code&gt; instead of passing around items, we pass the delta, wrapped in the &lt;code&gt;ChangeObject&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each instance of the &lt;code&gt;ChangeOject&lt;/code&gt; contains the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;newVersion&lt;/code&gt;  - it’s an instance of the newly inserted or modified item. On the Java side it’s available via &lt;code&gt;getNewVersion()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;prevVersion&lt;/code&gt; - it’s an instance of the deleted of old version of modified item. On the Java side it’s available via &lt;code&gt;getPrevVersion()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;array of &lt;code&gt;changepropertyNames&lt;/code&gt; if this &lt;code&gt;ChangeObject&lt;/code&gt; represents an update operation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The rest of &lt;code&gt;ChangeObject&lt;/code&gt; details described on wiki on github (see the link in &lt;em&gt;Useful Links&lt;/em&gt; section).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The corresponding Java implementation of &lt;code&gt;ChangeObject&lt;/code&gt; is available on the server side and Clear Toolkit passes &lt;code&gt;ChangeObject&lt;/code&gt; instances to the appropriate &lt;code&gt;do*&lt;/code&gt; method of the service class. Take a look at the &lt;code&gt;getPersons_doCreate()&lt;/code&gt; method from &lt;a href=&quot;#LISTING_3&quot;&gt;Implementation of PersonService interface&lt;/a&gt;. When the server needs to read the data arrived from the client your Java class has to invoke the method &lt;code&gt;changeObject.getNewVersion()&lt;/code&gt;. This method will return the JSON object that you need to deserialize into the object &lt;code&gt;Person&lt;/code&gt;. This is done in &lt;a href=&quot;#LISTING_3&quot;&gt;Implementation of PersonService interface&lt;/a&gt; and looks like this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; Person dto = (Person) deserializeObject(
                (Map&amp;lt;String, String&amp;gt;) changeObject.getNewVersion(),Person.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-three-data-pagination&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#part-three-data-pagination&quot;&gt;&lt;/a&gt;Part Three: Data Pagination&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pagination feature is needed in almost every enterprise web application. Often you don’t want to bring all the  data to the client at once - a page by page feeds is a lot more responsive. The user can navigate back and forth between the pages using pagination UI components. To do that, we need to split our data on the server side into chunks so we can display it only once specific page is required. Implementing pagination is the agenda for the Part Three of this article. Here’s the plan:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the  data pagination to our sample CRUD ExtJS+Java application:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;Ext.toolbar.Paging&lt;/code&gt; component&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bind both &lt;em&gt;grid&lt;/em&gt; and &lt;em&gt;pagingtoolbar&lt;/em&gt; to the same store&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;DirectOptions&lt;/code&gt; class to read the pagination parameters&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are going to extend our CRUD application by adding the paging toolbar component bound to the same store as the grid. The class &lt;code&gt;DirectOptions&lt;/code&gt; will handle pagination parameters on the server side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Part 1 and 2 you’ve learned how to generate the UI from the Java back end service and how to generate the ExtJS store and ExtJS model.  In this part you’ll how to add the pagination functionality to our CRUD  application by asking the server to send only portions of data. I’ll need to refactor the service code from previous example to generate a little bit more data than only five records. &lt;a href=&quot;#LISTING_4&quot;&gt;Refactored implementation of PersonService Interface&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_4&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Refactored implementation of PersonService Interface&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class PersonServiceImpl extends _PersonServiceImpl {
  @Override
    public List&amp;lt;Person&amp;gt; getPersons() {
        List&amp;lt;Person&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        for (int i=0; i&amp;lt;1000; i++){
            result.add(new Person(i, &amp;quot;Joe&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;555-55-55&amp;quot;, &amp;quot;1111-11-1111&amp;quot;));
        }
        return result;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Google Chrome Console shows that &lt;code&gt;PersonStore&lt;/code&gt; was populated with one thousand records. Let’s add the pagination component using the Ext &lt;code&gt;toolbarpaging&lt;/code&gt; component. Let’s add it to the file sampleApp.js &lt;a href=&quot;#LISTING_5&quot;&gt;Sample Application Entry&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_5&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sample Application Entry&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;Ext.Loader.setConfig({
	disableCaching : false,
	enabled : true,
	paths : {
		episode_3_pagination : &amp;apos;app&amp;apos;,
		Clear : &amp;apos;clear&amp;apos;
	}
});

Ext.syncRequire(&amp;apos;episode_3_pagination.init.InitDirect&amp;apos;);
// Define GridPanel
var myStore = Ext.create(&amp;apos;episode_3_pagination.store.dto.PersonStore&amp;apos;,{});		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
Ext.define(&amp;apos;episode_3_pagination.view.SampleGridPanel&amp;apos;, {
	extend : &amp;apos;Ext.grid.Panel&amp;apos;,
	store : myStore,
	alias : &amp;apos;widget.samplegridpanel&amp;apos;,
	autoscroll : true,
	plugins : [{
		ptype : &amp;apos;cellediting&amp;apos;
	}],
	dockedItems: [
		{
			xtype: &amp;apos;pagingtoolbar&amp;apos;,		&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
			displayInfo: true,
			dock: &amp;apos;top&amp;apos;,
			store: myStore			&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
		}
	],
	columns : [
		{header : &amp;apos;firstName&amp;apos;, dataIndex : &amp;apos;firstName&amp;apos;, editor : {xtype : &amp;apos;textfield&amp;apos;}, flex : 1 },
		{header : &amp;apos;id&amp;apos;, dataIndex : &amp;apos;id&amp;apos;, flex : 1 },
		{header : &amp;apos;lastName&amp;apos;, dataIndex : &amp;apos;lastName&amp;apos;, editor : {xtype : &amp;apos;textfield&amp;apos;}, flex : 1 },
		{header : &amp;apos;phone&amp;apos;, dataIndex : &amp;apos;phone&amp;apos;, editor : {xtype : &amp;apos;textfield&amp;apos;}, flex : 1 },
		{header : &amp;apos;ssn&amp;apos;, dataIndex : &amp;apos;ssn&amp;apos;, editor : {xtype : &amp;apos;textfield&amp;apos;}, flex : 1 }],
	tbar : [
		{text : &amp;apos;Load&amp;apos;, action : &amp;apos;load&amp;apos;},
		{text : &amp;apos;Add&amp;apos;, action : &amp;apos;add&amp;apos;},
		{text : &amp;apos;Remove&amp;apos;, action : &amp;apos;remove&amp;apos;},
		{text : &amp;apos;Sync&amp;apos;, action : &amp;apos;sync&amp;apos;}
		]
	});
// Launch the application
Ext.application({
	name : &amp;apos;episode_3_pagination&amp;apos;,
	requires : [&amp;apos;Clear.override.ExtJSOverrider&amp;apos;],
	controllers : [&amp;apos;SampleController&amp;apos;],
	launch : function() {
		Ext.create(&amp;apos;Ext.container.Viewport&amp;apos;, {
			items : [{
				xtype : &amp;apos;samplegridpanel&amp;apos;
			}]
		});
	}
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Let’s manually instantiate this store - create a separate variable &lt;code&gt;myStore&lt;/code&gt; for this store and with empty config object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Adding the xtype &lt;code&gt;pagingtoolbar&lt;/code&gt; to this component docked items property - I’d like to display the information and dock this element at the top.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Now the paging toolbar is also connected to same store.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to fix automatically generated controller to control loading of data on
click of Load button &lt;a href=&quot;#LISTING_6&quot;&gt;Controller for sample application&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_6&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Controller for sample application&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;Ext.define(&amp;apos;episode_3_pagination.controller.SampleController&amp;apos;, {
	extend: &amp;apos;Ext.app.Controller&amp;apos;,
	stores: [&amp;apos;episode_3_pagination.store.dto.PersonStore&amp;apos;],
	refs: [{								&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
		ref: &amp;apos;ThePanel&amp;apos;,
		selector: &amp;apos;samplegridpanel&amp;apos;
	}],

	init: function() {
		this.control({
			&amp;apos;samplegridpanel button[action=load]&amp;apos;: {
				click: this.onLoad
			}
		});
	},

	onLoad: function() {
		// returns instance of PersonStore
		var store = this.getThePanel().getStore();		&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
		store.load();
	}
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We can bind the store instance to our grid panel. In controller’s &lt;code&gt;refs&lt;/code&gt; property I’m referencing our  &lt;code&gt;simplegrid&lt;/code&gt; panel with &lt;code&gt;ThePanel&lt;/code&gt; alias.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In this case I don’t need to explicitly retrieve the store instance by name. Instead, we can use getters &lt;code&gt;getPanel()&lt;/code&gt; and &lt;code&gt;getStore()&lt;/code&gt; automatically generated by the ExtJS framework.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the user clicks the button &lt;em&gt;next&lt;/em&gt; or &lt;em&gt;previous&lt;/em&gt; the method &lt;code&gt;loadPage&lt;/code&gt; of the underlying store is called. Let’s examine the &lt;code&gt;directprovider&lt;/code&gt; URL - server side router of remoting calls - and see how the direct request looks like.  Open Google Chrome Developer Tools from the menu View → Developer, refresh the Web page and go to the Network tab. You’ll that each time the user clicks on the &lt;em&gt;next&lt;/em&gt; or &lt;em&gt;previous&lt;/em&gt; buttons on the pagination toolbar the component sends &lt;code&gt;directOptions&lt;/code&gt; as a part of the request.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;FIG-9&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/fig_09.png&quot; alt=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. Request payload details&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Default Ext Direct request doesn’t carry any information about page size. Clear JS, the client side extension of the ExtJS framework, adds some extra functionality to Ext.data.DirectStore component to pass the page start and limit values to the server side. At this point, the &lt;code&gt;directOptions&lt;/code&gt; request property shown in &lt;a href=&quot;#FIG-9&quot;&gt;Request payload details&lt;/a&gt; can be extracted on the server side to get the information about the page’s boundaries. Let’s return to the code of &lt;code&gt;PersonServiceImpl&lt;/code&gt; and add some extra code there. Right now the pagination doesn’t work. The server sends the entire thousand records, because the server is not aware that the data has to be paginated. We’ll fix it in &lt;a href=&quot;#LISTING_7&quot;&gt;Implementation of PersonService with pagination&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;LISTING_7&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Implementation of PersonService with pagination&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package service;
import java.util.ArrayList;
import java.util.List;

import clear.djn.DirectOptions;			&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

import dto.Person;
import service.generated.*;

public class PersonServiceImpl extends _PersonServiceImpl {
	@Override
	public List&amp;lt;Person&amp;gt; getPersons() {
		List&amp;lt;Person&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
		for (int i=0; i&amp;lt;1000; i++){
			result.add(new Person(i, &amp;quot;Joe&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;555-55-55&amp;quot;, &amp;quot;1111-11-1111&amp;quot;));
		}
		&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
		int start = ((Double)DirectOptions.getOption(&amp;quot;start&amp;quot;)).intValue();
		int limit = ((Double)DirectOptions.getOption(&amp;quot;limit&amp;quot;)).intValue();

		limit = Math.min(start+limit, result.size() );		&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
		DirectOptions.setOption(&amp;quot;total&amp;quot;, result.size());	&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
		result = result.subList(start, limit);			&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

		return result;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;On the server side there is a special object called &lt;code&gt;DirectOptions&lt;/code&gt;, which comes with Clear Toolkit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We’re interested in start and in limit options (see &lt;a href=&quot;#FIG-9&quot;&gt;Request payload details&lt;/a&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Calculate the actual limit. Assign the size of the data collection to the &lt;code&gt;limit&lt;/code&gt; variable if it’s  less than the page size (&lt;code&gt;start+limit&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Notify the component about the total number of elements on the server side by using &lt;code&gt;DirectOptions.setOption()&lt;/code&gt; method with total option.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Before returning the result, create a subset, an actual page of data. In this case I need to use method of  java.util.List.sublist() which produces the view of the portion of this list between indexes specified by the &lt;code&gt;start&lt;/code&gt; and the &lt;code&gt;limit&lt;/code&gt; parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see from the Network tab in &lt;a href=&quot;#FIG-8&quot;&gt;Scaffolded CRUD application template&lt;/a&gt;, we limited the data load to 25 elements per page. Clicking on next or previous buttons will get you only a page worth of data. The Google Chrome Developers Tools Network tab shows that that we are sending start and limit every time and our response contains object with 25 elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’d like to repeat all of the above steps on you own, watch &lt;a href=&quot;http://faratasystems.com/training-at-farata-youtube-chanel/&quot;&gt;the screencasts&lt;/a&gt; where I perform all the actions described in this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development of enterprise web application involves many steps that need to be done by developer. But with the right set of tools the repetitive steps can be automated. Remember the DRY principle - don’t repeat yourself. Try to do more with less efforts. I hope this article will help your to get started start with Clear Data Builder, which should make any ExtJS enterprise software developer more productive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Subscribe to our &lt;a href=&quot;http://youtube.com/trainingAtFarata&quot;&gt;youtube channel&lt;/a&gt; to get access to the latest videos, screencasts and learning materials. You are invited to read our upcoming book &lt;a href=&quot;http://enterprisewebbook.com/&quot;&gt;Enterprise Web Development&lt;/a&gt; (work in progress) that include coverage of ExtJS.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additional-useful-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#additional-useful-links&quot;&gt;&lt;/a&gt;Additional Useful Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://farata.github.com/ClearJS/&quot;&gt;Clear Toolkit on Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://cleartoolkit.com/downloads/plugins/extjs/cleardatabuilder/4.1.4/&quot;&gt;Clear Data Builder Eclipse update site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sencha.com/ext-js/4-1/#!/guide/application_architecture&quot;&gt;ExtJS MVC Application Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.Model&quot;&gt;Ext.data.Model&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.Store&quot;&gt;Ext.data.Store&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sencha.com/ext-js/4-1/#!/guide/grid&quot;&gt;ExtJS Grid Panel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sencha.com/ext-js/4-1/#!/api/Ext.toolbar.Paging&quot;&gt;Ext.toolbar.Paging&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sencha.com/products/extjs/extdirect&quot;&gt;Ext Direct&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/directjngine/&quot;&gt;DirectJNgine: Direct for Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Farata/ClearJS/wiki/Change-Object:-Synchronization-Keystone&quot;&gt;Change Object: Synchronization Keystone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Farata/ClearJS/wiki/Data-Pagination&quot;&gt;Data Pagination in Clear Toolkit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2013/01/19/set-jdk-on-osx.html</id>
<title>Set JDK on OSX</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2013-01-19T14:00:00+00:00</published>
<link href="http://gamov.io/posts/2013/01/19/set-jdk-on-osx.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<category term="osx"></category>
<category term="java"></category>
<category term="protip"></category>
<category term="zsh"></category>
<summary>
Table 1. Revisions history







Version
Date
Comments




v1.2
11/9/2016
Explained JVMPlatformVersion for Java 9


v1.1
11/8/2016
Added Java 9 command


v1.0
01/19/2013
Initial blog post




Apple announced to remove Java Preferences app from Mac OS X.
Details could be found here http://support.apple.com/kb/HT5493). Let&#8217;s try to fix it.


Generally, Java applications will use the JAVA_HOME environment variable to pick a JDK.


To set to JDK 6

export JAVA_HOME=$(/usr/libexec/java_home -v 1.6)



To set JDK 7

 export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)



To set JDK 8

 export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)



To set JDK 9

 export JAVA_HOME=$(/usr/libexec/java_home -v 9)









In JDK 9, Oracle changed JVMPlatformVersion format.
Before JDK 9, the format was 1.x








Figure 1. You can check this in /Library/Java/JavaVirtualMachines/{java version}/Contents/Info.plist


Created aliases for my zsh shell

alias setjdk16='export JAVA_HOME=$(/usr/libexec/java_home...
</summary>
<content type="html">
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/terminal_java.png&quot; alt=&quot;terminal java&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 60%;&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Revisions history&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 33.3334%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.2&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11/9/2016&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Explained &lt;code&gt;JVMPlatformVersion&lt;/code&gt; for Java 9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.1&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11/8/2016&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Added Java 9 command&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;v1.0&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;01/19/2013&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initial blog post&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph panel&quot;&gt;
&lt;p&gt;Apple announced to remove Java Preferences app from Mac OS X.&lt;br /&gt;
Details could be found here &lt;a href=&quot;http://support.apple.com/kb/HT5493&quot; class=&quot;bare&quot;&gt;http://support.apple.com/kb/HT5493&lt;/a&gt;). Let’s try to fix it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, Java applications will use the JAVA_HOME environment variable to pick a JDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;To set to JDK 6&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;export JAVA_HOME=$(/usr/libexec/java_home -v 1.6)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;To set JDK 7&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt; export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;To set JDK 8&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt; export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;To set JDK 9&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt; export JAVA_HOME=$(/usr/libexec/java_home -v 9)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In JDK 9, Oracle changed &lt;code&gt;JVMPlatformVersion&lt;/code&gt; format.
Before JDK 9, the format was &lt;code&gt;1.x&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://gamov.io/images/info.plist_jdk8_9.png&quot; alt=&quot;info.plist jdk8 9&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. You can check this in &lt;code&gt;/Library/Java/JavaVirtualMachines/{java version}/Contents/Info.plist&lt;/code&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Created aliases for my zsh shell&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;alias setjdk16=&amp;apos;export JAVA_HOME=$(/usr/libexec/java_home -v 1.6)&amp;apos;
alias setjdk17=&amp;apos;export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)&amp;apos;
alias setjdk18=&amp;apos;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)&amp;apos;
alias setjdk19=&amp;apos;export JAVA_HOME=$(/usr/libexec/java_home -v 9)&amp;apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the exotic cases, like Netbeans follow instruction &lt;a href=&quot;https://blogs.oracle.com/bobby/entry/switching_jdks_on_mac&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2012/07/26/websockets-for-java-developers.html</id>
<title>WebSockets for Java Developers. Princeton JUG talk slides</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2012-07-26T00:00:00+00:00</published>
<link href="http://gamov.io/posts/2012/07/26/websockets-for-java-developers.html" rel="alternate" type="text/html" />
<summary>
Last tuesday I delivered presentation at Princeton JUG «WebSockets: The Current State of the Most Valuable HTML5 API». + HTML5 specification includes WebSockets, a new communication protocol
for the Web. It&#8217;s becoming the best choice for building real-time Web
applications. I did an overview of the servers (including upcoming
JavaEE 7 RI - Glassfish 4) and frameworks that support WebSockets and
showed some use cases where WebSockets shine. At the end we had short
conversation  about various approaches for the server- and client-side
implementations of WebSockets that can be used in the Web applications
today.


Here are my slides from that presentation:...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last tuesday I delivered presentation at Princeton JUG «WebSockets: The Current State of the Most Valuable HTML5 API». + HTML5 specification includes WebSockets, a new communication protocol
for the Web. It’s becoming the best choice for building real-time Web
applications. I did an overview of the servers (including upcoming
JavaEE 7 RI - Glassfish 4) and frameworks that support WebSockets and
showed some use cases where WebSockets shine. At the end we had short
conversation  about various approaches for the server- and client-side
implementations of WebSockets that can be used in the Web applications
today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are my slides from that presentation:&lt;/p&gt;
&lt;/div&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;2&quot; data-id=&quot;501056beac941a000205aee0&quot; data-ratio=&quot;1.7777777777777777&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2012/05/21/alfred-showhide-desktop-icons-on-mac-os.html</id>
<title>Alfred Extension: Show/Hide desktop icons on Mac OS X</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2012-05-21T00:00:00+00:00</published>
<link href="http://gamov.io/posts/2012/05/21/alfred-showhide-desktop-icons-on-mac-os.html" rel="alternate" type="text/html" />
<category term="alfred"></category>
<category term="shell"></category>
<category term="macos x"></category>
<summary>
For some reasons, I’m using desktop as temporary storage of files &#8211; downloaded from internet, in-progress documents, screenshots and code snippets. Time after time I create screencasts and I need to have clean desktop.
First, I tried to find available solution and have found Desktop Curtain. I don’t need all this fanciness (different desktop wallpapers, customization) so $2.99 is overkill for me and for this taks.

So, I decide to create my own solution with help of shell and Alfred.
Googled for Mac OS X command and I created simple script what I wrapped after as Alfred Extension. 

You can download Alfred Extension...
</summary>
<content type="html">
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://gamov.io/images/blog/2012-05-21-alfred-showhide-desktop-icons-on-mac-os/2012-05-21-alfred-showhide-desktop-icons-on-mac-os_1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;103&quot; src=&quot;http://gamov.io/images/blog/2012-05-21-alfred-showhide-desktop-icons-on-mac-os/2012-05-21-alfred-showhide-desktop-icons-on-mac-os_1.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;For some reasons, I’m using desktop as temporary storage of files – downloaded from internet, in-progress documents, screenshots and code snippets. Time after time I create screencasts and I need to have clean desktop.&lt;br /&gt;
First, I tried to find available solution and have found &lt;a href=&quot;http://manytricks.com/desktopcurtain/&quot;&gt;Desktop Curtain&lt;/a&gt;. I don’t need all this fanciness (different desktop wallpapers, customization) so $2.99 is overkill for me and for this taks.&lt;br /&gt;
&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br /&gt;
So, I decide to create my own solution with help of shell and Alfred.&lt;br /&gt;
Googled for Mac OS X command and I created simple script what I wrapped after as Alfred Extension. &lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/2760502.js?file=toggle_desktop_icons.sh&quot;&gt;&lt;/script&gt;&lt;br /&gt;
You can download Alfred Extension for my &lt;a href=&quot;https://dl.dropbox.com/u/1585128/Toggle_Desktop_Icons.alfredextension&quot;&gt;Dropbox&lt;/a&gt;. To use it you need to have &lt;a href=&quot;http://www.alfredapp.com/powerpack/&quot;&gt;Alfred PowerPack&lt;/a&gt; purchased. &lt;br /&gt;
Cheers&lt;/p&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2012/05/16/webjars-for-assets-management-in-your.html</id>
<title>WebJars for assets management in your project</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2012-05-16T00:00:00+00:00</published>
<link href="http://gamov.io/posts/2012/05/16/webjars-for-assets-management-in-your.html" rel="alternate" type="text/html" />
<category term="java"></category>
<category term="ext js"></category>
<category term="github"></category>
<category term="maven"></category>
<summary>
Usage automatic build tools for dependency management is best practice in Java world and usage of tools such as Maven has been proven by the years.
But what if utilize existing Maven knowledge of Java dependencies management for JavaScript projects. Hopefully, some Java and JVM frameworks (like Grails or Play2) provided their own way of dealing with static resources.
But in most common situations, you don’t have lot of options for deployment your application.
To read the full post, surf on over to the Farata Systems Blog: http://flexblog.faratasystems.com/2012/05/16/using-webjars-for-assets-management-in-javascript-projects 
Thanks everyone...
</summary>
<content type="html">
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://gamov.io/images/blog/2012-05-16-webjars-for-assets-management-in-your/webJars+app+screen2.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;168&quot; src=&quot;http://gamov.io/images/blog/2012-05-16-webjars-for-assets-management-in-your/webJars+app+screen2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;Usage automatic build tools for dependency management is best practice in Java world and usage of tools such as Maven has been proven by the years.&lt;br /&gt;
But what if utilize existing Maven knowledge of Java dependencies management for JavaScript projects. Hopefully, some Java and JVM frameworks (like &lt;a href=&quot;http://blog.springsource.org/2011/06/30/countdown-to-grails-2-0-static-resources/&quot;&gt;Grails&lt;/a&gt; or &lt;a href=&quot;http://www.jamesward.com/2012/04/25/introducing-webjars-web-libraries-as-managed-dependencies&quot;&gt;Play2&lt;/a&gt;) provided their own way of dealing with static resources.&lt;br /&gt;
But in most common situations, you don’t have lot of options for deployment your application.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;To read the full post, surf on over to the Farata Systems Blog: &lt;a href=&quot;http://flexblog.faratasystems.com/2012/05/16/using-webjars-for-assets-management-in-javascript-projects&quot;&gt;http://flexblog.faratasystems.com/2012/05/16/using-webjars-for-assets-management-in-javascript-projects &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks everyone&lt;/p&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2012/01/28/how-to-download-videos-from-infoq-for.html</id>
<title>How to download videos from InfoQ for offline viewing</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2012-01-28T06:15:00+00:00</published>
<link href="http://gamov.io/posts/2012/01/28/how-to-download-videos-from-infoq-for.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
From my humble opinion, InfoQ is one of best resources for developers nowadays. You can find lot of IT related stuff - interviews, articles, presentations slides and videos. And today I would like to talk about videos from InfoQ in particular. Is always good to have offline version to watch it during long commute, for instance. Unfortunately, InfoQ administration for some reasons not allow to download videos.
However, I found very elegant solution how to do that. I did it on my MacOS X with Safari, probably it will work with Safari for Windows as well.


Go to Safari Preferences, Advanced tab and activate Develop menu...
</summary>
<content type="html">
&lt;p&gt;&lt;a href=&quot;http://cdn4.infoq.com/styles/i/logo-infoq.gif&quot;&gt;&lt;img src=&quot;http://cdn4.infoq.com/styles/i/logo-infoq.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From my humble opinion, &lt;a href=&quot;http://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; is one of best resources for developers nowadays. You can find lot of IT related stuff - interviews, articles, presentations slides and videos. And today I would like to talk about videos from InfoQ in particular. Is always good to have offline version to watch it during long commute, for instance. Unfortunately, InfoQ administration for some reasons not allow to download videos.&lt;br /&gt;
However, I found very elegant solution how to do that. I did it on my MacOS X with Safari, probably it will work with Safari for Windows as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to Safari Preferences, Advanced tab and activate Develop menu item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://img.skitch.com/20120128-83adqeb8wr6c67dbdhmduh93e2.jpg&quot;&gt;&lt;img src=&quot;https://img.skitch.com/20120128-83adqeb8wr6c67dbdhmduh93e2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change browser User Agent to iOS (iPad or iPhone)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://img.skitch.com/20120128-x5fg6rsj7cwmpnj2qscu8t2431.jpg&quot;&gt;&lt;img src=&quot;https://img.skitch.com/20120128-x5fg6rsj7cwmpnj2qscu8t2431.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to page that contains desired movie. For example, I tool this video &lt;a href=&quot;http://www.infoq.com/presentations/JVM-Performance-Tuning-twitter&quot;&gt;http://www.infoq.com/presentations/JVM-Performance-Tuning-twitter &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thanks to InfoQ developers for providing HTML5 interface with video tag support. Now you can open page source (Right click → View Source) and search for that tag. In source tag you can find full url to desired movie&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://img.skitch.com/20120128-x9nf7y47136yd3ry28du53s1ec.jpg&quot;&gt;&lt;img src=&quot;https://img.skitch.com/20120128-x9nf7y47136yd3ry28du53s1ec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;curl -O&lt;/em&gt; or simply paste link to address bar of Safari and download video&lt;/li&gt;
&lt;li&gt;Enjoy! &lt;/li&gt;
&lt;/ul&gt;

</content>
</entry>
<entry>
<id>http://gamov.io/posts/2012/01/10/rapid-automation-for-flexjavablazeds.html</id>
<title>Rapid automation for Flex/Java/BlazeDS projects</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2012-01-10T00:00:00+00:00</published>
<link href="http://gamov.io/posts/2012/01/10/rapid-automation-for-flexjavablazeds.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Right after vacation I talked on New York Flex User group regarding open source project for Flex/Java developers &#8211; Clear Toolkit. Here are the slides of my presentation.

Feel free to comment!...
</summary>
<content type="html">
&lt;p&gt;Right after vacation I talked on New York Flex User group regarding open source project for Flex/Java developers – Clear Toolkit. Here are the slides of my presentation.&lt;br /&gt;
&lt;iframe frameborder=&quot;0&quot; height=&quot;451&quot; src=&quot;https://docs.google.com/present/embed?id=dgqpwrbr_452gnrs3wks&amp;amp;size=m&quot; width=&quot;555&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;
Feel free to comment!&lt;/p&gt;
</content>
</entry>
<entry>
<id>http://gamov.io/posts/2011/09/11/adobe-max.html</id>
<title>Adobe MAX</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2011-09-11T23:07:00+00:00</published>
<link href="http://gamov.io/posts/2011/09/11/adobe-max.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Here are the small notes from Adobe MAX conference:


Flash is still here. Adobe creates tools for seamless transition b/w Flash and HTML5 (Adobe Edge)
Touch apps is next big thing.
Mobile apps developed with Flash/Flex/Air and packaged to native.
Upcomming changes in Flash runtime- workers - actionScript threads
Upcomming changes in AIR platform - native extensions
Creative Cloud - another big thing was announced. Sharing and collaboration b/w creative suite applications and new touch app....
</summary>
<content type="html">
&lt;p&gt;Here are the small notes from Adobe MAX conference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flash is still here. Adobe creates tools for seamless transition b/w Flash and HTML5 (Adobe Edge)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Touch apps is next big thing.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Mobile apps developed with Flash/Flex/Air and packaged to native.&lt;/li&gt;
&lt;li&gt;Upcomming changes in Flash runtime- &lt;em&gt;workers&lt;/em&gt; - actionScript threads&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Upcomming changes in AIR platform - native extensions&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Creative Cloud - another big thing was announced. Sharing and collaboration b/w creative suite applications and new touch app. &lt;/li&gt;
&lt;/ul&gt;

</content>
</entry>
<entry>
<id>http://gamov.io/posts/2011/07/26/eclipse-javalangunsatisfiedlinkerror.html</id>
<title>Eclipse: java.lang.UnsatisfiedLinkError: Cannot load 32-bit SWT libraries on 64-bit JVM</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2011-07-26T04:22:00+00:00</published>
<link href="http://gamov.io/posts/2011/07/26/eclipse-javalangunsatisfiedlinkerror.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Last weekend spend in setup of environment for eclipse plug-in development. I have task to fix and update one plugin. This is add-on to Flash Builder.  But before adding something, it&#39;s good to run that plugin before. My environment is Mac OS X 10.7 Lion, Eclipse 3.6 (32bit because FB not supported 64bit version of Eclipse) and Flash Builder 4.5. But I faced with odd exception

!SESSION 2011-07-25 23:59:39.350
-----------------------------------------------

eclipse.buildId=M20110210-1200

java.version=1.6.0_26

java.vendor=Apple Inc.

BootLoader constants: OS=macosx, ARCH=x86, WS=cocoa, NL=en_US

Framework arguments:  -product org.eclipse.epp.package.jee.product

Command-line arguments:  -product org.eclipse.epp.package.jee.product -data
/Users/apple/Workspaces/work/../runtime-EclipseApplication -dev file:/Users/apple/Workspaces/work/.metadata/.plugins/org.eclipse.pde.core/Eclipse
Application/dev.properties -os macosx -ws cocoa -arch x86 -consoleLog



!ENTRY org.eclipse.osgi 4 0 2011-07-25 23:59:57.129

!MESSAGE Application error

!STACK 1

java.lang.UnsatisfiedLinkError: Cannot load...
</summary>
<content type="html">
&lt;p&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-9dnzyV85GIY/Ti5AjeUNXJI/AAAAAAAAA0A/o07suDvhURw/s1600/1311653968_eclipse.png&quot;&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-9dnzyV85GIY/Ti5AjeUNXJI/AAAAAAAAA0A/o07suDvhURw/s1600/1311653968_eclipse.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last weekend spend in setup of environment for eclipse plug-in development. I have task to fix and update one plugin. This is add-on to Flash Builder.  But before adding something, it&amp;apos;s good to run that plugin before. My environment is Mac OS X 10.7 Lion, Eclipse 3.6 (32bit because FB not supported 64bit version of Eclipse) and Flash Builder 4.5. But I faced with odd exception&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!SESSION 2011-07-25 23:59:39.350
-----------------------------------------------

eclipse.buildId=M20110210-1200

java.version=1.6.0_26

java.vendor=Apple Inc.

BootLoader constants: OS=macosx, ARCH=x86, WS=cocoa, NL=en_US

Framework arguments:  -product org.eclipse.epp.package.jee.product

Command-line arguments:  -product org.eclipse.epp.package.jee.product -data
/Users/apple/Workspaces/work/../runtime-EclipseApplication -dev file:/Users/apple/Workspaces/work/.metadata/.plugins/org.eclipse.pde.core/Eclipse
Application/dev.properties -os macosx -ws cocoa -arch x86 -consoleLog



!ENTRY org.eclipse.osgi 4 0 2011-07-25 23:59:57.129

!MESSAGE Application error

!STACK 1

java.lang.UnsatisfiedLinkError: Cannot load 32-bit SWT libraries on 64-bit
JVM

 at org.eclipse.swt.internal.Library.loadLibrary(Library.java:197)

 at org.eclipse.swt.internal.Library.loadLibrary(Library.java:174)

 at org.eclipse.swt.internal.C.(C.java:21)

 at org.eclipse.swt.internal.cocoa.NSThread.isMainThread(NSThread.java:33)

 at org.eclipse.swt.graphics.Device.(Device.java:116)

 at org.eclipse.swt.widgets.Display.(Display.java:671)

 at org.eclipse.swt.widgets.Display.(Display.java:662)

 at org.eclipse.ui.internal.Workbench.createDisplay(Workbench.java:708)

 at org.eclipse.ui.PlatformUI.createDisplay(PlatformUI.java:161)

 at org.eclipse.ui.internal.ide.application.IDEApplication.createDisplay(IDEApplication.java:145)

 at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:88)

 at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)

 at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)

 at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)

 at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)

 at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)

 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)

 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

 at java.lang.reflect.Method.invoke(Method.java:597)

 at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)

 at org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)

 at org.eclipse.equinox.launcher.Main.run(Main.java:1408)

 at org.eclipse.equinox.launcher.Main.main(Main.java:1384)

An error has occurred. See the log file

/Users/apple/Workspaces/runtime-EclipseApplication/.metadata/.log.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mac OS X shipped with 2 versions of JVM - 32 bit and 64 bit accordingly. So, 
First I tried to change order of JVM preference from /Application/Utilities/Java 
Preferences but it didn&amp;apos;t work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-isacmmvTbSE/Ti4-JJeYuwI/AAAAAAAAAzw/W_U-0Xap5L8/s1600/Screen+Shot+2011-07-26+at+12.08.30+AM.png&quot;&gt;&lt;img src=&quot;http://3.bp.blogspot.com/-isacmmvTbSE/Ti4-JJeYuwI/AAAAAAAAAzw/W_U-0Xap5L8/s640/Screen+Shot+2011-07-26+at+12.08.30+AM.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After consulting with colleagues and googling I come up with solution. I went 
to Eclipse→Preferences→Java→Installed JRE and add default JVM argument *&lt;em&gt;-d32 
*&lt;/em&gt;(must be small d)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-e49-TQlstWw/Ti4_nvylakI/AAAAAAAAAz4/EKfU03X9lxE/s1600/Screen+Shot+2011-07-26+at+12.16.05+AM.png&quot;&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-e49-TQlstWw/Ti4_nvylakI/AAAAAAAAAz4/EKfU03X9lxE/s400/Screen+Shot+2011-07-26+at+12.16.05+AM.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This command forces to use 32bit JVM. Happy coding!&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://gamov.io/posts/2011/07/10/building-and-testing-with-gradle-my.html</id>
<title>Building and Testing with Gradle - My Book Review</title>
<updated>2017-06-09T09:30:19-04:00</updated>
<published>2011-07-10T20:57:00+00:00</published>
<link href="http://gamov.io/posts/2011/07/10/building-and-testing-with-gradle-my.html" rel="alternate" type="text/html" />
<author>
<name>Viktor Gamov</name>
</author>
<summary>
Last month I participated in JAXConf conference on San Jose, CA. There was many talks related to agile development and code quality stuff. And after that event I started looking to Gradle - next generation build tool. Couple weeks later I found a Building and Testing with Gradle written by git evangelists Tim Berglundand ( @tlberglund) and Matthew McCullough (@matthewmccull).  

Book very focused and easy to read. I got my dirty cheap ebook version on thursday night, read this book during my commute to work and now come up with this review.
[][7]
Looking at the table of contents, you can see the book covers big...
</summary>
<content type="html">
&lt;p&gt;&lt;a href=&quot;http://covers.oreilly.com/images/0636920019909/lrg.jpg&quot;&gt;&lt;img src=&quot;http://covers.oreilly.com/images/0636920019909/lrg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last month I participated in JAXConf conference on San Jose, CA. There was many talks related to agile development and code quality stuff. And after that event I started looking to &lt;a href=&quot;http://www.gradle.org/&quot;&gt;Gradle&lt;/a&gt; - next generation build tool. Couple weeks later I found a &lt;a href=&quot;http://oreilly.com/catalog/0636920019909/&quot;&gt;Building and Testing with Gradle&lt;/a&gt; written by git evangelists Tim Berglundand ( &lt;a href=&quot;http://twitter.com/tlberglund&quot;&gt;@tlberglund&lt;/a&gt;) and Matthew McCullough (&lt;a href=&quot;http://twitter.com/matthewmccull&quot;&gt;@matthewmccull&lt;/a&gt;).  &lt;/p&gt;

&lt;p&gt;Book very focused and easy to read. I got&lt;a href=&quot;https://twitter.com/gamussa/status/89181037036449792&quot;&gt; my dirty cheap ebook version&lt;/a&gt; on thursday night, read this book during my commute to work and now come up with this review.&lt;br /&gt;
[][7]&lt;br /&gt;
Looking at the &lt;a href=&quot;http://oreilly.com/catalog/0636920019909#toc&quot;&gt;table of contents&lt;/a&gt;, you can see the book covers big part of questions.&lt;br /&gt;
What this book is about:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to configure your first build&lt;/li&gt;
&lt;li&gt;Building Java and Groovy projects&lt;/li&gt;
&lt;li&gt;Protect you investments and reuse you ant and maven scripts.&lt;/li&gt;
&lt;li&gt;Integrate code quality routines and popular testing frameworks with gradle build&lt;/li&gt;
&lt;li&gt;Modularize your project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What this books isn&amp;apos;t about:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;apos;s not a cookbook. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This books gives you great overview of gradle infrastructure, but there isn&amp;apos;t ready-to-use solutions. If you want to have Problem-Solution reading please take a look on &lt;a href=&quot;http://wiki.gradle.org/display/GRADLE/Cookbook&quot;&gt;Gradle cookbook &lt;/a&gt;on official wiki. But still, this book is very practical.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plugin development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gradle provides lot of functionality for customizing you gradle build. But it&amp;apos;s imposible to cover each and every aspects of building process on particular company or project. This book doesn&amp;apos;t contain information about developing custom plugins for non-java applications. But is you want to start building your own gradle stuff - &lt;a href=&quot;http://gradle.codehaus.org/Plugins#Plugins-WritingCustomPlugins&quot;&gt;welcome to wiki&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;br /&gt;
If you suffered enough from Ant and Maven XML-configs and custom workarounds, want improve you productivity while developing build files for your app and passionate about DSL and Groovy, I encourage you to take a look at gradle and Book will help you kick-off your gradle journey.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After reading - go code!&lt;/strong&gt;&lt;br /&gt;
After you done with book, go to &lt;a href=&quot;https://github.com/gradleware/oreilly-gradle-book-examples&quot;&gt;GitHub repository&lt;/a&gt; and get I book&amp;apos;s source code. Then go to &lt;a href=&quot;https://github.com/gradle/gradle&quot;&gt;another GitHub repo&lt;/a&gt; and get gradle sources and start to participate and contribute to Gradle project.&lt;/p&gt;

&lt;p&gt;[7]: &lt;/p&gt;

</content>
</entry>
</feed>
